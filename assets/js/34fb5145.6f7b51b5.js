"use strict";(self.webpackChunksentinel_docs=self.webpackChunksentinel_docs||[]).push([[6445],{23436:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>l,frontMatter:()=>i,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"scripts","title":"Scripts","description":"This page contains simple and useful scripts for development within the Sentinel Ecosystem.","source":"@site/docs/nodes/scripts.md","sourceDirName":".","slug":"/scripts","permalink":"/nodes/scripts","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":7,"frontMatter":{"title":"Scripts","sidebar_position":7},"sidebar":"tutorialSidebar","previous":{"title":"RPC List","permalink":"/nodes/rpc-list"}}');var o=t(74848),r=t(28453);const i={title:"Scripts",sidebar_position:7},c="Node Scripts",d={},a=[{value:"Instructions",id:"instructions",level:2},{value:"Script list",id:"script-list",level:2},{value:"<code>Node Status</code>",id:"node-status",level:3},{value:"<code>RPC Countries</code>",id:"rpc-countries",level:3},{value:"<code>RPC Uptime</code>",id:"rpc-uptime",level:3}];function p(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"node-scripts",children:"Node Scripts"})}),"\n",(0,o.jsx)(n.p,{children:"This page contains simple and useful scripts for development within the Sentinel Ecosystem."}),"\n",(0,o.jsx)(n.h2,{id:"instructions",children:"Instructions"}),"\n",(0,o.jsxs)(n.p,{children:["Copy the scripts below into a file and save it with a ",(0,o.jsx)(n.code,{children:".sh"})," extension."]}),"\n",(0,o.jsx)(n.p,{children:"Make the file executable by running the following command:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"sudo chmod +x filename.sh\n"})}),"\n",(0,o.jsx)(n.p,{children:"Run the file using the terminal"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"./filename\n"})}),"\n",(0,o.jsx)(n.h2,{id:"script-list",children:"Script list"}),"\n",(0,o.jsx)(n.p,{children:"Explore the collection of scripts below"}),"\n",(0,o.jsx)(n.h3,{id:"node-status",children:(0,o.jsx)(n.code,{children:"Node Status"})}),"\n",(0,o.jsxs)(n.p,{children:["Provides the status of the specified ",(0,o.jsx)(n.code,{children:"sentnode"})," address."]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Node Status"}),(0,o.jsx)("p",{children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:'title="/home/${USER}/sentnode-status.sh"',children:'#!/bin/bash\n\n# Fetching the JSON data from the API\napi_response=$(curl -s https://api.sentinelgrowthdao.com/sentinel/nodes/sentnode1rx7kjsvhvklcluhu9zl6hswrau06vh3ll7gthr)\n\n# Extracting the remote URL from the JSON response\nremote_url=$(echo "$api_response" | jq -r \'.node.remote_url\')\n\n# Fetching the status from the remote URL\nstatus_response=$(curl -k "$remote_url/status" | jq \'.\')\n\necho "Status from $remote_url:"\necho "$status_response" | jq \'.\'\n'})})})]}),"\n",(0,o.jsx)(n.h3,{id:"rpc-countries",children:(0,o.jsx)(n.code,{children:"RPC Countries"})}),"\n",(0,o.jsx)(n.p,{children:"Lists the countries of the RPC Nodes."}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"RPC Countries"}),(0,o.jsx)("p",{children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:'title="/home/${USER}/rpc-countries.sh"',children:'#!/bin/bash\n\n# List of addresses to iterate over\n\nddresses=("https://rpc-sentinel.busurnode.com:443"\n           "https://na-rpc-sentinel.busurnode.com:443"\n           "https://eu-rpc-sentinel.busurnode.com:443"\n           "https://as-rpc-sentinel.busurnode.com:443"\n           "https://rpc.sentineldao.com:443"\n           "https://na-rpc.sentineldao.com:443"\n           "https://eu-rpc.sentineldao.com:443"\n           "https://as-rpc.sentineldao.com:443"\n           "https://rpc.na.sentinel.atmosfermuda.com:443"\n           "https://rpc.eu.sentinel.atmosfermuda.com:443"\n           "https://rpc.ap.sentinel.atmosfermuda.com:443"\n           "https://sentinel-rpc.publicnode.com:443"\n           "https://rpc.mathnodes.com:443"\n           "https://rpc.dvpn.me:443"\n           "https://rpc.ro.mathnodes.com:443"\n           "https://rpc.noncompliant.network:443"\n           "https://sentinel-rpc.polkachu.com:443"\n           "https://rpc.sentinel.dragonstake.io:443"\n           "https://rpc.dvpn.roomit.xyz:443"\n           "https://sentinel-rpc.validatornode.com:443"\n           "https://rpc.trinitystake.io:443"\n           "https://rpc.sentinel.quokkastake.io:443"\n           "https://sentinel.rpc.nodeshub.online:443")\n\n\n# Iterate over each address\nfor address in "${addresses[@]}"; do\n    echo "Address: $address"\n    \n    # Get the IP address\n    rpc_ipv4=$(nslookup "$address" | awk \'/^Address: / { print $2 }\')\n    \n    # Get country information for the address\n    country=$(curl -s "http://ip-api.com/json/${rpc_ipv4}" | jq -r \'.country\')\n    \n    # Print the country information\n    echo "Country: $country"\n    echo ""\ndone\n'})})})]}),"\n",(0,o.jsx)(n.h3,{id:"rpc-uptime",children:(0,o.jsx)(n.code,{children:"RPC Uptime"})}),"\n",(0,o.jsx)(n.p,{children:"Lists the RPC Nodes and their uptime."}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"Using Sentinelhub"}),(0,o.jsx)("p",{children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:'title="/home/${USER}/rpc-uptime.sh"',children:'#!/bin/bash\n\n# List of addresses to iterate over\n\nrpc_addresses=("https://rpc-sentinel.busurnode.com:443"\n           "https://na-rpc-sentinel.busurnode.com:443"\n           "https://eu-rpc-sentinel.busurnode.com:443"\n           "https://as-rpc-sentinel.busurnode.com:443"\n           "https://rpc.sentineldao.com:443"\n           "https://na-rpc.sentineldao.com:443"\n           "https://eu-rpc.sentineldao.com:443"\n           "https://as-rpc.sentineldao.com:443"\n           "https://rpc.na.sentinel.atmosfermuda.com:443"\n           "https://rpc.eu.sentinel.atmosfermuda.com:443"\n           "https://rpc.ap.sentinel.atmosfermuda.com:443"\n           "https://sentinel-rpc.publicnode.com:443"\n           "https://rpc.mathnodes.com:443"\n           "https://rpc.dvpn.me:443"\n           "https://rpc.ro.mathnodes.com:443"\n           "https://rpc.noncompliant.network:443"\n           "https://sentinel-rpc.polkachu.com:443"\n           "https://rpc.sentinel.dragonstake.io:443"\n           "https://rpc.dvpn.roomit.xyz:443"\n           "https://sentinel-rpc.validatornode.com:443"\n           "https://rpc.trinitystake.io:443"\n           "https://rpc.sentinel.quokkastake.io:443"\n           "https://sentinel.rpc.nodeshub.online:443")\n\nfor node in "${rpc_addresses[@]}"; do\n   echo ""\n   echo "$node stats:"\n   # Capture the real time only using time command and redirecting stdout and stderr to /dev/null\n   real_time=$( { time /usr/local/bin/sentinelhub query block --node "$node" > /dev/null; } 2>&1 )\n   # Extract and print just the real time\n   echo "$real_time" | grep -oP \'real\\t\\K\\S+\'\n   echo ""\ndone\n'})})})]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsxs)("summary",{children:["Without Using Sentinelhub - Just install dependencies with ",(0,o.jsx)(n.code,{children:"sudo apt install curl jq bc -y"})]}),(0,o.jsx)("p",{children:(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:'title="/home/${USER}/rpc-uptime.sh"',children:'#!/bin/bash\n\n# Set the PATH environment variable\nexport PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"\n\n# Define an array of RPC node addresses\nrpc_addresses=(\n    "https://rpc.sentinel.co:443"\n    "https://sentinel-rpc.polkachu.com:443"\n    "https://sentinel-rpc.validatornode.com:443"\n    "https://sentinel-rpc.badgerbite.io:443"\n    "https://sentinel-rpc.publicnode.com:443"\n    "https://rpc.sentinel.quokkastake.io:443"\n    "https://rpc-sentinel.whispernode.com:443"\n    "https://rpc.sentinel.chaintools.tech:443"\n    "https://rpc.mathnodes.com:443"\n    "https://rpc.dvpn.roomit.xyz:443"\n)\n\n# Declare an associative array to store execution times\ndeclare -A execution_times\n\n# Loop through each RPC node address\nfor node in "${rpc_addresses[@]}"; do\n    echo "Testing ${node}..."\n\n    # Record the start time\n    start_time=$(date +%s.%N)\n\n    # Fetch the latest block height using the RPC endpoint\n    curl -s "${node}/block" | jq -r .result.block.header.height\n\n    # Record the end time\n    end_time=$(date +%s.%N)\n\n    # Calculate execution time\n    execution_time=$(echo "$end_time - $start_time" | bc)\n    execution_times["$node"]=$execution_time\n\n    echo "Finished testing ${node}, Execution took: $execution_time"\ndone\n\n# Sort nodes by their execution time\nsorted_nodes=($(for node in "${rpc_addresses[@]}"; do\n    echo "$node ${execution_times["$node"]}"\ndone | sort -k2 -n | awk \'{print $1}\'))\n\n# Display the sorted nodes with their execution times\nfor node in "${sorted_nodes[@]}"; do\n    echo "Node: $node, Execution Time: ${execution_times["$node"]}"\ndone\n\n# Select the top 5 fastest nodes\nnew_addrs=()\nfor ((a = 0; a <= 4; a++)); do\n    new_addrs+=("${sorted_nodes[$a]}")\ndone\n\n# Create a comma-separated list of the top 5 nodes\ncomma_separated=$(IFS=,; echo "${new_addrs[*]}")\n\n# Format the output line\nnew_line="rpc_addresses=\\"$comma_separated\\""\n\n# Print the new line\necho "$new_line"\n\n# Exit the script\nexit 0\n'})})})]})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var s=t(96540);const o={},r=s.createContext(o);function i(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);