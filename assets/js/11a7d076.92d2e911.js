"use strict";(self.webpackChunksentinel_docs=self.webpackChunksentinel_docs||[]).push([[346],{62890:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"manual/node-config","title":"Node Configuration","description":"config.toml, wireguard.toml, and v2ray.toml","source":"@site/docs/dvpn-node-setup/manual/node-config.md","sourceDirName":"manual","slug":"/manual/node-config","permalink":"/dvpn-node-setup/manual/node-config","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Node Configuration","description":"config.toml, wireguard.toml, and v2ray.toml","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Preparing Sentinel Docker image","permalink":"/dvpn-node-setup/manual/docker-image"},"next":{"title":"Run the Node","permalink":"/dvpn-node-setup/manual/node-run"}}');var i=t(74848),r=t(28453);const a={title:"Node Configuration",description:"config.toml, wireguard.toml, and v2ray.toml",sidebar_position:4},s=void 0,l={},c=[{value:"Node Configuration",id:"node-configuration",level:2},{value:"Set the Variables",id:"set-the-variables",level:2},{value:"Initialize the Configuration",id:"initialize-the-configuration",level:2},{value:"The created files are:",id:"the-created-files-are",level:3},{value:"Add a Mnemonic",id:"add-a-mnemonic",level:2},{value:"Enable Firewall Ports",id:"enable-firewall-ports",level:2},{value:"Detect Required Ports Automatically",id:"detect-required-ports-automatically",level:3},{value:"Open the Ports with UFW",id:"open-the-ports-with-ufw",level:3},{value:"Enable Port Forwarding (for Residential Nodes)",id:"enable-port-forwarding-for-residential-nodes",level:2}];function d(e){const n={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"node-configuration",children:"Node Configuration"}),"\n",(0,i.jsx)(n.h2,{id:"set-the-variables",children:"Set the Variables"}),"\n",(0,i.jsx)(n.p,{children:"Before creating the configuration files, set up a few variables by running the following commands:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Define application directory\n# Define application directory\nAPP_DIR="${HOME}/.sentinel-dvpnx"\n\n# Get your public IP addresses\nMY_IPv4_ADDR=$(curl --silent ipv4.icanhazip.com 2>/dev/null)\nMY_IPv6_ADDR=$(curl --silent ipv6.icanhazip.com 2>/dev/null)\n\nREMOTE_ADDRS_FLAGS=()\nif [ -n "${MY_IPv4_ADDR}" ]; then REMOTE_ADDRS_FLAGS+=("--node.remote-addrs" \\"${MY_IPv4_ADDR}\\"); fi\nif [ -n "${MY_IPv6_ADDR}" ]; then REMOTE_ADDRS_FLAGS+=("--node.remote-addrs" \\"${MY_IPv6_ADDR}\\"); fi\n\n# Set Docker volume mapping\nVOLUME="${APP_DIR}:/root/.sentinel-dvpnx"\n\n# Set key name for transactions\nTX_FROM_NAME="key-1"\n\n# Display configuration for verification\necho "App Directory: $APP_DIR"\necho "Public IPv4: $MY_IPv4_ADDR"\necho "Public IPv6: $MY_IPv6_ADDR"\necho "Key Name: $TX_FROM_NAME"\n'})}),"\n",(0,i.jsx)(n.p,{children:"You should see something like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"App Directory: /home/<you_user>/.sentinel-dvpnx\nPublic IPv4: <your_ip>\nKey Name: key-1\n"})}),"\n",(0,i.jsx)(n.h2,{id:"initialize-the-configuration",children:"Initialize the Configuration"}),"\n",(0,i.jsx)(n.p,{children:"The following command creates the configuration files, which you can later customise."}),"\n",(0,i.jsxs)(n.p,{children:["Be sure to choose your preferred node type using the ",(0,i.jsx)(n.code,{children:"--node.service-type"})," flag \u2014 options are ",(0,i.jsx)(n.code,{children:"wireguard"}),", ",(0,i.jsx)(n.code,{children:"v2ray"}),", or ",(0,i.jsx)(n.code,{children:"openvpn"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'sudo docker run \\\n  --rm \\\n  --volume "${VOLUME}" \\\n  sentinel-dvpnx init \\\n  --keyring.backend "test" \\\n  --node.service-type "wireguard" \\\n  --tx.from-name "${TX_FROM_NAME}" \\\n  "${REMOTE_ADDRS_FLAGS[@]}"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Expected output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Validating configuration\nWriting app config file=/root/.sentinel-dvpnx/config.toml\nInitializing PKI with CA certificate and key dir=/root/.sentinel-dvpnx\nIssuing certificate and key name=tls\nInitializing service force=false type=wireguard\nConfiguration initialized successfully\n"})}),"\n",(0,i.jsx)(n.h3,{id:"the-created-files-are",children:"The created files are:"}),"\n",(0,i.jsxs)(n.p,{children:["Main configuration file: ",(0,i.jsx)(n.code,{children:"${APP_DIR}/config.toml"})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"config.toml"}),(0,i.jsx)("p",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Keyring Configuration\n[keyring]\n\n# Storage backend for managing cryptographic keys and sensitive data.\n# Different backends offer varying levels of security and OS integration.\n# Allowed: file, kwallet, memory, os, pass, test\n# Example: "file"\nbackend = "test"\n\n# Unique identifier name for the keyring instance to distinguish it from other keyrings.\n# Used internally to organize and retrieve stored cryptographic keys and credentials.\n# Allowed: Any string\n# Example: "my-node-keyring"\nname = "sentinel"\n\n# Query Configuration\n[query]\n\n# Whether to get cryptographic proofs for query results and verify the proof for data authenticity.\n# Proofs increase security but add network overhead and processing time.\n# Allowed: true, false\n# Example: true\nprove = false\n\n# Maximum number of retry attempts for failed query operations before giving up.\n# More retries improve reliability but may increase response times.\n# Allowed: Any positive integer\n# Example: 3\nretry_attempts = 5\n\n# Waiting period between consecutive retry attempts for failed queries.\n# Longer delays reduce network load but increase total response time.\n# Allowed: Duration string (e.g., 1s, 5m, 1h)\n# Example: "2s"\nretry_delay = "1s"\n\n# RPC Configuration\n[rpc]\n\n# List of RPC server endpoints for blockchain communication.\n# Multiple endpoints provide redundancy and load distribution for improved reliability.\n# Allowed: Array of valid URLs\n# Example: ["https://rpc.example.com:443", "https://backup-rpc.example.com:443"]\naddrs = ["https://rpc.sentinel.co:443"]\n\n# Unique identifier of the blockchain network to connect to.\n# Ensures communication with the correct network and prevents accidental connections.\n# Allowed: Valid chain identifier string\n# Example: "testnet-1"\nchain_id = "sentinelhub-2"\n\n# Maximum time to wait for RPC requests before considering them failed.\n# Balance between responsiveness and reliability based on network conditions.\n# Allowed: Duration string (e.g., 1s, 5m, 1h)\n# Example: "10s"\ntimeout = "5s"\n\n# Transactions Configuration\n[tx]\n\n# Blockchain address that has granted authorization to submit transactions on behalf of this node.\n# Enables delegated transaction signing for automated operations.\n# Allowed: Valid address string\n# Example: "sent1yftwk6a4h5fk4xzp3znk6puqj92uxw7jhxwd76"\nauthz_granter_addr = ""\n\n# Number of retry attempts for broadcasting transactions if initial submission fails.\n# Helps overcome temporary network issues but should be limited.\n# Allowed: Any positive integer\n# Example: 3\nbroadcast_retry_attempts = 1\n\n# Waiting period between transaction broadcast retry attempts.\n# Allows temporary network issues to resolve and prevents overwhelming the blockchain.\n# Allowed: Duration string (e.g., 1s, 5m, 1h)\n# Example: "10s"\nbroadcast_retry_delay = "5s"\n\n# Address of an account that automatically pays transaction fees on behalf of this node.\n# Enables gasless transactions while the fee granter covers costs.\n# Allowed: Valid address string\n# Example: "sent1yftwk6a4h5fk4xzp3znk6puqj92uxw7jhxwd76"\nfee_granter_addr = ""\n\n# Local account name used to sign and send transactions.\n# Must exist in keyring with sufficient balance to cover transaction fees and deposits.\n# Allowed: Any string\n# Example: "node-operator"\nfrom_name = "key-1"\n\n# Maximum computational resources (gas) that can be consumed by a single transaction.\n# Higher limits allow complex operations but cost more in fees.\n# Allowed: Any positive integer\n# Example: 300000\ngas = 200000\n\n# Multiplier applied to estimated gas usage to ensure sufficient allocation.\n# Values above 1.0 add safety margin but increase transaction costs.\n# Allowed: Any positive decimal number\n# Example: 1.25\ngas_adjustment = 1.15\n\n# Price per unit of gas for transaction processing.\n# Higher prices increase likelihood of fast inclusion but cost more in fees.\n# Allowed: Valid price string with denomination\n# Example: "0.2udvpn"\ngas_prices = "0.1udvpn"\n\n# Maximum attempts to query blockchain for transaction status after submission.\n# More attempts improve detection chances but may delay error reporting.\n# Allowed: Any positive integer\n# Example: 50\nquery_retry_attempts = 30\n\n# Time interval between consecutive transaction status queries.\n# Balance between fast confirmation and blockchain load.\n# Allowed: Duration string (e.g., 1s, 5m, 1h)\n# Example: "2s"\nquery_retry_delay = "1s"\n\n# Whether transactions are simulated before execution to estimate gas usage and detect failures.\n# Improves success rates and cost accuracy but adds overhead.\n# Allowed: true, false\n# Example: false\nsimulate_and_execute = true\n\n# Handshake DNS Configuration\n[handshake_dns]\n\n# Enables Handshake DNS daemon for decentralized domain name resolution.\n# When enabled, both the node and its clients can resolve Handshake domain names through the decentralized network.\n# Allowed: true, false\n# Example: true\nenable = false\n\n# Number of peer connections to maintain within the Handshake DNS network.\n# More peers provide better reliability but consume more network resources.\n# Allowed: Any positive integer\n# Example: 12\npeers = 8\n\n# Node Configuration\n[node]\n\n# TCP port for client communication as a single port number or <in_port:out_port> mapping format.\n# The mapping format allows the node API to run internally on in_port while being available to clients on out_port.\n# Enables clients to connect to the node\'s API for management and service access.\n# Allowed: Single port or port mapping format\n# Example: "8080" or "8080:8081"\napi_port = "19781"\n\n# Pricing per gigabyte in format <denomination:base_value,quote_value> where base_value is USD price and quote_value is\n# equivalent token amount. Blockchain prioritizes base_value and converts to quote_value.\n# Multiple denominations separated by semicolons.\n# Allowed: Valid prices format string\n# Example: "udvpn:0.05,2500000;atom:0.05,10000"\ngigabyte_prices = "udvpn:0.0025,12_500_000"\n\n# Pricing per hour in format <denomination:base_value,quote_value> where base_value is USD price and quote_value is\n# equivalent token amount. Blockchain prioritizes base_value and converts to quote_value.\n# Multiple denominations separated by semicolons.\n# Allowed: Valid prices format string\n# Example: "udvpn:0.10,5000000;atom:0.10,20000"\nhourly_prices = "udvpn:0.005,25_000_000"\n\n# Frequency for evaluating and switching to the best performing RPC endpoint.\n# Regular switching ensures optimal blockchain connectivity and service quality.\n# Allowed: Duration string (e.g., 1s, 5m, 1h)\n# Example: "10m0s"\ninterval_best_rpc_addr = "5m0s"\n\n# How often the node queries external services to determine its geographic location for service discovery and helping\n# clients find nearby nodes.\n# Allowed: Duration string (e.g., 1s, 5m, 1h)\n# Example: "12h0m0s"\ninterval_geoip_location = "6h0m0s"\n\n# Frequency for fetching updated pricing data from the specified oracle and publishing it to the blockchain.\n# Ensures that on-chain pricing information remains accurate and reflects current market conditions.\n# Allowed: Duration string (e.g., 1s, 5m, 1h)\n# Example: "1h0m0s"\ninterval_prices_update = "6h0m0s"\n\n# Frequency for synchronizing session usage data to the blockchain ledger.\n# Records payment obligations and service consumption on-chain for transparency.\n# Allowed: Duration string (e.g., 1s, 5m, 1h)\n# Example: "2h0m0s"\ninterval_session_usage_sync_with_blockchain = "1h55m0s"\n\n# How often session usage statistics are updated in the local database for real-time billing and monitoring purposes.\n# Allowed: Duration string (e.g., 1s, 5m, 1h)\n# Example: "5s"\ninterval_session_usage_sync_with_database = "2s"\n\n# Frequency of validation checks to ensure recorded session usage data is accurate and consistent.\n# Helps detect and prevent billing discrepancies.\n# Allowed: Duration string (e.g., 1s, 5m, 1h)\n# Example: "10s"\ninterval_session_usage_validate = "5s"\n\n# How often the node verifies that active client sessions are still valid.\n# Cleanup process helps free resources from abandoned sessions.\n# Allowed: Duration string (e.g., 1s, 5m, 1h)\n# Example: "2m0s"\ninterval_session_validate = "5m0s"\n\n# Frequency for running automated network performance tests to measure bandwidth, latency, and connectivity quality for\n# service optimization.\n# Allowed: Duration string (e.g., 1s, 5m, 1h)\n# Example: "24h0m0s"\ninterval_speedtest = "168h0m0s"\n\n# How often the node broadcasts its status and service information to the network.\n# Regular updates ensure discoverability and accurate client information.\n# Allowed: Duration string (e.g., 1s, 5m, 1h)\n# Example: "30m0s"\ninterval_status_update = "55m0s"\n\n# Human-readable display name for this node in network listings and client applications.\n# Choose a unique, descriptive name to distinguish your node.\n# Allowed: Any string\n# Example: "my-node-moniker"\nmoniker = "<your_node_moniket>"\n\n# Addresses that clients use to reach this node for service connections.\n# Can include IP addresses with ports or domain names with ports for flexible client connectivity.\n# Allowed: Comma-separated address list\n# Example: ["192.168.1.100:8080", "node.example.com:9090"]\nremote_addrs = ["123.456.7.8"]\n\n# Type of VPN or proxy service protocol this node provides.\n# Each type has different capabilities, security features, and client compatibility.\n# Allowed: openvpn, v2ray, wireguard\n# Example: "wireguard"\nservice_type = "wireguard"\n\n# Oracle Configuration\n[oracle]\n\n# Oracle provider used to fetch quote prices for base prices and update them on-chain.\n# Leave empty to disable oracle functionality entirely.\n# Allowed: "coingecko", "osmosis", or empty\n# Example: "osmosis"\nname = "coingecko"\n\n# CoinGecko Oracle Configuration\n[oracle.coingecko]\n\n# API key for authenticating requests to the CoinGecko API.\n# Some endpoints may require an API key for higher rate limits or premium features.\n# Allowed: Any valid API key string\n# Example: "your-coingecko-api-key"\napi_key = ""\n\n# Osmosis Oracle Configuration\n[oracle.osmosis]\n\n# REST API endpoint for accessing Osmosis market data.\n# The oracle queries this endpoint to fetch token prices and liquidity pool information.\n# Allowed: Valid URL string\n# Example: "https://api.example.com:443"\napi_addr = "https://lcd.osmosis.zone:443"\n\n# QoS Configuration\n[qos]\n\n# Maximum number of simultaneous peer connections the node will accept.\n# Helps prevent resource exhaustion and ensures stable performance under high load.\n# Allowed: Any positive integer\n# Example: 50\nmax_peers = 250\n'})})})]}),"\n",(0,i.jsx)(n.p,{children:"Service-Specific Configurations:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["WireGuard: ",(0,i.jsx)(n.code,{children:"${APP_DIR}/wireguard/config.toml"})]}),"\n",(0,i.jsxs)(n.li,{children:["V2Ray: ",(0,i.jsx)(n.code,{children:"${APP_DIR}/v2ray/config.toml"})]}),"\n",(0,i.jsxs)(n.li,{children:["OpenVPN: ",(0,i.jsx)(n.code,{children:"${APP_DIR}/openvpn/config.toml"})]}),"\n"]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Wireguard"}),(0,i.jsx)("p",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Specifies the IPv4 address block for routing and networking.\n# Used to define the network range that clients will be assigned addresses from for VPN connectivity.\n# Allowed: Valid IPv4 CIDR notation\n# Example: "10.0.0.1/24"\nipv4_addr = "10.0.0.1/24"\n\n# Specifies the IPv6 address block for routing and networking.\n# Used to define the IPv6 network range that clients will be assigned addresses from for VPN connectivity.\n# Allowed: Valid IPv6 CIDR notation\n# Example: "fd00::/64"\nipv6_addr = ""\n\n# Specifies the outbound network interface for NAT and routing.\n# Defines which network interface the VPN traffic should be routed through for internet access.\n# Allowed: Valid network interface name\n# Example: "eth0"\nout_interface = "eth0"\n\n# Port for incoming connections as a single port number or "in_port:out_port" mapping format.\n# The mapping format allows the VPN service to run internally on in_port while being available to clients on out_port.\n# Typically, UDP for WireGuard protocol.\n# Allowed: Single port or port mapping format\n# Example: "51820" or "51820:51820"\nport = "25068"\n\n# Specifies the private key for WireGuard encryption.\n# The cryptographic private key used for establishing secure connections with clients.\n# Allowed: Valid WireGuard private key\n# Example: "AMuDADXXc5S1b8J6wxKhX29AiNKgNej6k6/Ol+Fof0g="\nprivate_key = "# Example: "AMuDADXXc5S1b8J6wxKhX29AiNKgNej6k6/Ol+Fof0g="\n'})})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"V2Ray"}),(0,i.jsx)("p",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Port for incoming connections as a single port number or "in_port:out_port" mapping format.\n# The mapping format allows the V2Ray service to run internally on in_port while being available to clients on out_port.\n# Must be unique and not conflict with other services on the same machine.\n# Allowed: Single port or port mapping format\n# Example: "10086" or "10086:10086"\n\n# Proxy protocol type for communication on the inbound connection.\n# Determines the protocol used for establishing connections with clients connecting to this V2Ray instance.\n# Allowed: vmess, vless\n# Example: "vmess"\n\n# Transport protocol type for handling incoming requests and data transmission.\n# Determines the underlying transport mechanism used for communication between client and server.\n# Allowed: domainsocket, gun, grpc, http, mkcp, quic, tcp, websocket\n# Example: "tcp"\n\n# Transport Security setting for the inbound connection encryption.\n# Determines whether the connection uses encryption and what type of security protocol is applied.\n# Allowed: none, tls\n# Example: "tls"\n\n[[inbounds]]\nport = "54556"\nproxy_protocol = "vmess"\ntransport_protocol = "quic"\ntransport_security = "tls"\n\n[[inbounds]]\nport = "13860"\nproxy_protocol = "vless"\ntransport_protocol = "grpc"\ntransport_security = "none"\n'})})})]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"OpenVPN"}),(0,i.jsx)("p",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Specifies the IPv4 address block for routing and networking.\n# Used to define the network range that clients will be assigned addresses from for VPN connectivity.\n# Allowed: Valid IPv4 CIDR notation\n# Example: "10.8.0.1/24"\nipv4_addr = "10.247.176.1/24"\n\n# Specifies the IPv6 address block for routing and networking.\n# Used to define the IPv6 network range that clients will be assigned addresses from for VPN connectivity.\n# Allowed: Valid IPv6 CIDR notation\n# Example: "fd00::/64"\nipv6_addr = ""\n\n# Specifies the outbound network interface for NAT and routing.\n# Defines which network interface the VPN traffic should be routed through for internet access.\n# Allowed: Valid network interface name\n# Example: "eth0"\nout_interface = "eth0"\n\n# Port for incoming connections as a single port number or "in_port:out_port" mapping format.\n# The mapping format allows the server to run internally on in_port while being available to clients on out_port.\n# Typically, UDP or TCP for OpenVPN protocol.\n# Allowed: Single port or port mapping format\n# Example: "1194" or "1194:1194"\nport = "11608"\n\n# Specifies the transport protocol for communication.\n# Determines whether the service uses UDP for better performance or TCP for better reliability through firewalls.\n# Allowed: udp, tcp\n# Example: "udp"\nprotocol = "udp"\n'})})})]}),"\n",(0,i.jsx)(n.h2,{id:"add-a-mnemonic",children:"Add a Mnemonic"}),"\n",(0,i.jsxs)(n.p,{children:["Now, add the account key specified in your ",(0,i.jsx)(n.code,{children:"config.toml"})," file:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'sudo docker run \\\n  --rm \\\n  --volume "${VOLUME}" \\\n  --interactive \\\n  --tty \\\n  sentinel-dvpnx keys add "${TX_FROM_NAME}"\n'})}),"\n",(0,i.jsx)(n.p,{children:"You can either enter your existing BIP-39 mnemonic or generate a new one by pressing Enter.\nYou\u2019ll then be prompted for an optional passphrase (press Enter again to skip)."}),"\n",(0,i.jsxs)(n.p,{children:["This will generate an operator address (starting with ",(0,i.jsx)(n.code,{children:"sent1"}),") and a mnemonic phrase.\nWrite the mnemonic down and store it securely, ",(0,i.jsx)(n.strong,{children:"you\u2019ll need it to recover your key"}),"."]}),"\n",(0,i.jsxs)(t,{children:[(0,i.jsx)("summary",{children:"Output"}),(0,i.jsx)("p",{children:(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'Enter your BIP-39 mnemonic, or hit enter to generate one:\n\nEnter your BIP-39 passphrase, or hit enter to use the default:\n\n####################################################################\nWARNING: YOU MUST SAVE THE FOLLOWING MNEMONIC SECURELY!\nTHIS MNEMONIC IS REQUIRED TO RECOVER YOUR KEY.\nIF YOU LOSE THIS MNEMONIC, YOU WILL NOT BE ABLE TO RECOVER YOUR KEY.\n####################################################################\n\naddress: sent1x4faeeu8lqjnnjywa89j9xv34h0wm2yre96uc\nmnemonic: kind smart guide build join dutch stairs chat frown camp capital glory allow van purity monster gauge impact title hand erupt surface scale december\nname: key-1\npubkey: \'{"@type":"/cosmos.crypto.secp256k1.PubKey","key":"AvOE9Fxzmtb5RMKQDvpBE3K1xih5qVPWshRWHth8Awfu"}\'\ntype: local\n\nKey created successfully\n'})})})]}),"\n",(0,i.jsx)(n.h2,{id:"enable-firewall-ports",children:"Enable Firewall Ports"}),"\n",(0,i.jsx)(n.h3,{id:"detect-required-ports-automatically",children:"Detect Required Ports Automatically"}),"\n",(0,i.jsx)(n.p,{children:"You can automatically find all the ports your node needs with:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'# Automatically detect and configure required ports\nPUBLISH_PORT_ARGS=$(find "${APP_DIR}" -name "config.toml" -exec tomljson {} \\; |\n  jq -sr \'[.[] | .. | objects | to_entries[] | select(.key == "port" or (.key | endswith("_port"))) | .value] |\n  flatten | unique | map("-p \\(.):\\(.)/tcp -p \\(.):\\(.)/udp") | join(" ")\')\n\n# Verify port configuration\necho "Port arguments: $PUBLISH_PORT_ARGS"\n'})}),"\n",(0,i.jsx)(n.p,{children:"Example output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"Port arguments: -p 11608:11608/tcp -p 11608:11608/udp -p 13860:13860/tcp -p 13860:13860/udp -p 19781:19781/tcp -p 19781:19781/udp -p 25068:25068/tcp -p 25068:25068/udp -p 54556:54556/tcp -p 54556:54556/udp\n"})}),"\n",(0,i.jsx)(n.p,{children:"If you\u2019re using zsh, also run:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:'PUBLISH_PORT_ARGS=("${(@s/ /)PUBLISH_PORT_ARGS}")\n'})}),"\n",(0,i.jsx)(n.h3,{id:"open-the-ports-with-ufw",children:"Open the Ports with UFW"}),"\n",(0,i.jsx)(n.p,{children:"Once you have the required ports, open them in your firewall:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"sudo ufw allow 11608,13860,19781,25068,54556/tcp\nsudo ufw allow 11608,13860,19781,25068,54556/udp\n"})}),"\n",(0,i.jsx)(n.h2,{id:"enable-port-forwarding-for-residential-nodes",children:"Enable Port Forwarding (for Residential Nodes)"}),"\n",(0,i.jsx)(n.p,{children:"If you\u2019re running your node from home, you\u2019ll need to enable port forwarding on your router so others can connect to it."}),"\n",(0,i.jsx)(n.p,{children:"In your router\u2019s WAN settings, add entries like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"Name            ProtocolWAN     Port                    LAN port                Destination IP\nTCP_PORT        TCP             <tcp_port>              <tcp_port>              your_local_ip\nWIREGUARD_PORT  UDP             <wireguard_udp_port>    <wireguard_udp_port>    your_local_ip\nV2RAY_PORT      TCP             <v2ray_tcp_port>        <v2ray_tcp_port>        your_local_ip\n"})})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var o=t(96540);const i={},r=o.createContext(i);function a(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);