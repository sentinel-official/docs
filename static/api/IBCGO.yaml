openapi: 3.0.1
info:
  title: IBC-GO - gRPC Gateway docs
  description: A REST interface for state queries
  version: 1.0.0
servers:
- url: /
paths:
  /ibc/apps/transfer/v1/channels/{channel_id}/ports/{port_id}/escrow_address:
    get:
      tags:
      - Query
      summary: EscrowAddress returns the escrow address for a particular port and
        channel id.
      operationId: EscrowAddress
      parameters:
      - name: channel_id
        in: path
        description: unique channel identifier
        required: true
        schema:
          type: string
      - name: port_id
        in: path
        description: unique port identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  escrow_address:
                    title: the escrow account address
                    type: string
                description: QueryEscrowAddressResponse is the response type of the
                  EscrowAddress RPC method.
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /ibc/apps/transfer/v1/denom_hashes/{trace}:
    get:
      tags:
      - Query
      summary: DenomHash queries a denomination hash information.
      operationId: DenomHash
      parameters:
      - name: trace
        in: path
        description: The denomination trace ([port_id]/[channel_id])+/[denom]
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  hash:
                    type: string
                    description: hash (in hex format) of the denomination trace information.
                description: |-
                  QueryDenomHashResponse is the response type for the Query/DenomHash RPC
                  method.
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /ibc/apps/transfer/v1/denom_traces:
    get:
      tags:
      - Query
      summary: DenomTraces queries all denomination traces.
      operationId: DenomTraces
      parameters:
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
          format: boolean
      - name: pagination.reverse
        in: query
        description: |-
          reverse is set to true if results are to be returned in the descending order.

          Since: cosmos-sdk 0.43
        schema:
          type: boolean
          format: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  denom_traces:
                    type: array
                    description: denom_traces returns all denominations trace information.
                    items:
                      type: object
                      properties:
                        path:
                          type: string
                          description: |-
                            path defines the chain of port/channel identifiers used for tracing the
                            source of the fungible token.
                        base_denom:
                          type: string
                          description: base denomination of the relayed fungible token.
                      description: |-
                        DenomTrace contains the base denomination for ICS20 fungible tokens and the
                        source tracing information path.
                  pagination:
                    type: object
                    properties:
                      next_key:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently. It will be empty if
                          there are no more results.
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: pagination defines the pagination in the response.
                description: |-
                  QueryConnectionsResponse is the response type for the Query/DenomTraces RPC
                  method.
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /ibc/apps/transfer/v1/denom_traces/{hash}:
    get:
      tags:
      - Query
      summary: DenomTrace queries a denomination trace information.
      operationId: DenomTrace
      parameters:
      - name: hash
        in: path
        description: hash (in hex format) or denom (full denom with ibc prefix) of
          the denomination trace information.
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  denom_trace:
                    type: object
                    properties:
                      path:
                        type: string
                        description: |-
                          path defines the chain of port/channel identifiers used for tracing the
                          source of the fungible token.
                      base_denom:
                        type: string
                        description: base denomination of the relayed fungible token.
                    description: |-
                      DenomTrace contains the base denomination for ICS20 fungible tokens and the
                      source tracing information path.
                description: |-
                  QueryDenomTraceResponse is the response type for the Query/DenomTrace RPC
                  method.
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /ibc/apps/transfer/v1/params:
    get:
      tags:
      - Query
      summary: Params queries all parameters of the ibc-transfer module.
      operationId: TransferParams
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  params:
                    type: object
                    properties:
                      send_enabled:
                        type: boolean
                        description: |-
                          send_enabled enables or disables all cross-chain token transfers from this
                          chain.
                        format: boolean
                      receive_enabled:
                        type: boolean
                        description: |-
                          receive_enabled enables or disables all cross-chain token transfers to this
                          chain.
                        format: boolean
                    description: params defines the parameters of the module.
                description: QueryParamsResponse is the response type for the Query/Params
                  RPC method.
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /ibc/apps/interchain_accounts/controller/v1/owners/{owner}/connections/{connection_id}:
    get:
      tags:
      - Query
      summary: InterchainAccount returns the interchain account address for a given
        owner address on a given connection
      operationId: InterchainAccount
      parameters:
      - name: owner
        in: path
        required: true
        schema:
          type: string
      - name: connection_id
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  address:
                    type: string
                description: QueryInterchainAccountResponse the response type for
                  the Query/InterchainAccount RPC method.
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /ibc/apps/interchain_accounts/controller/v1/params:
    get:
      tags:
      - Query
      summary: Params queries all parameters of the ICA controller submodule.
      operationId: InterchainAccountsControllerParams
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  params:
                    type: object
                    properties:
                      controller_enabled:
                        type: boolean
                        description: controller_enabled enables or disables the controller
                          submodule.
                        format: boolean
                    description: params defines the parameters of the module.
                description: QueryParamsResponse is the response type for the Query/Params
                  RPC method.
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /ibc/apps/interchain_accounts/host/v1/params:
    get:
      tags:
      - Query
      summary: Params queries all parameters of the ICA host submodule.
      operationId: InterchainAccountsHostParams
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  params:
                    type: object
                    properties:
                      host_enabled:
                        type: boolean
                        description: host_enabled enables or disables the host submodule.
                        format: boolean
                      allow_messages:
                        type: array
                        description: allow_messages defines a list of sdk message
                          typeURLs allowed to be executed on a host chain.
                        items:
                          type: string
                    description: params defines the parameters of the module.
                description: QueryParamsResponse is the response type for the Query/Params
                  RPC method.
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          format: byte
  /ibc/apps/fee/v1/channels/{channel_id}/ports/{port_id}/fee_enabled:
    get:
      tags:
      - Query
      summary: FeeEnabledChannel returns true if the provided port and channel identifiers
        belong to a fee enabled channel
      operationId: FeeEnabledChannel
      parameters:
      - name: channel_id
        in: path
        description: unique channel identifier
        required: true
        schema:
          type: string
      - name: port_id
        in: path
        description: unique port identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: QueryFeeEnabledChannelResponse defines the response type for
                  the FeeEnabledChannel rpc
                type: object
                properties:
                  fee_enabled:
                    title: boolean flag representing the fee enabled channel status
                    type: boolean
                    format: boolean
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/apps/fee/v1/channels/{channel_id}/ports/{port_id}/incentivized_packets:
    get:
      tags:
      - Query
      summary: Gets all incentivized packets for a specific channel
      operationId: IncentivizedPacketsForChannel
      parameters:
      - name: channel_id
        in: path
        required: true
        schema:
          type: string
      - name: port_id
        in: path
        required: true
        schema:
          type: string
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
          format: boolean
      - name: pagination.reverse
        in: query
        description: |-
          reverse is set to true if results are to be returned in the descending order.

          Since: cosmos-sdk 0.43
        schema:
          type: boolean
          format: boolean
      - name: query_height
        in: query
        description: Height to query at.
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: QueryIncentivizedPacketsResponse defines the response type
                  for the incentivized packets RPC
                type: object
                properties:
                  incentivized_packets:
                    title: Map of all incentivized_packets
                    type: array
                    items:
                      title: IdentifiedPacketFees contains a list of type PacketFee
                        and associated PacketId
                      type: object
                      properties:
                        packet_id:
                          title: unique packet identifier comprised of the channel
                            ID, port ID and sequence
                          type: object
                          properties:
                            port_id:
                              title: channel port identifier
                              type: string
                            channel_id:
                              title: channel unique identifier
                              type: string
                            sequence:
                              title: packet sequence
                              type: string
                              format: uint64
                        packet_fees:
                          title: list of packet fees
                          type: array
                          items:
                            title: PacketFee contains ICS29 relayer fees, refund address
                              and optional list of permitted relayers
                            type: object
                            properties:
                              fee:
                                title: fee encapsulates the recv, ack and timeout
                                  fees associated with an IBC packet
                                type: object
                                properties:
                                  recv_fee:
                                    title: the packet receive fee
                                    type: array
                                    items:
                                      type: object
                                      properties:
                                        denom:
                                          type: string
                                        amount:
                                          type: string
                                      description: |-
                                        Coin defines a token with a denomination and an amount.

                                        NOTE: The amount field is an Int which implements the custom method
                                        signatures required by gogoproto.
                                  ack_fee:
                                    title: the packet acknowledgement fee
                                    type: array
                                    items:
                                      type: object
                                      properties:
                                        denom:
                                          type: string
                                        amount:
                                          type: string
                                      description: |-
                                        Coin defines a token with a denomination and an amount.

                                        NOTE: The amount field is an Int which implements the custom method
                                        signatures required by gogoproto.
                                  timeout_fee:
                                    title: the packet timeout fee
                                    type: array
                                    items:
                                      type: object
                                      properties:
                                        denom:
                                          type: string
                                        amount:
                                          type: string
                                      description: |-
                                        Coin defines a token with a denomination and an amount.

                                        NOTE: The amount field is an Int which implements the custom method
                                        signatures required by gogoproto.
                              refund_address:
                                title: the refund address for unspent fees
                                type: string
                              relayers:
                                title: optional list of relayers permitted to receive
                                  fees
                                type: array
                                items:
                                  type: string
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/apps/fee/v1/channels/{channel_id}/relayers/{relayer}/counterparty_payee:
    get:
      tags:
      - Query
      summary: CounterpartyPayee returns the registered counterparty payee for forward
        relaying
      operationId: CounterpartyPayee
      parameters:
      - name: channel_id
        in: path
        description: unique channel identifier
        required: true
        schema:
          type: string
      - name: relayer
        in: path
        description: the relayer address to which the counterparty is registered
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: QueryCounterpartyPayeeResponse defines the response type for
                  the CounterpartyPayee rpc
                type: object
                properties:
                  counterparty_payee:
                    title: the counterparty payee address used to compensate forward
                      relaying
                    type: string
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/apps/fee/v1/channels/{channel_id}/relayers/{relayer}/payee:
    get:
      tags:
      - Query
      summary: Payee returns the registered payee address for a specific channel given
        the relayer address
      operationId: Payee
      parameters:
      - name: channel_id
        in: path
        description: unique channel identifier
        required: true
        schema:
          type: string
      - name: relayer
        in: path
        description: the relayer address to which the distribution address is registered
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: QueryPayeeResponse defines the response type for the Payee
                  rpc
                type: object
                properties:
                  payee_address:
                    title: the payee address to which packet fees are paid out
                    type: string
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/apps/fee/v1/channels/{packet_id.channel_id}/ports/{packet_id.port_id}/sequences/{packet_id.sequence}/incentivized_packet:
    get:
      tags:
      - Query
      summary: IncentivizedPacket returns all packet fees for a packet given its identifier
      operationId: IncentivizedPacket
      parameters:
      - name: packet_id.channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: packet_id.port_id
        in: path
        description: channel port identifier
        required: true
        schema:
          type: string
      - name: packet_id.sequence
        in: path
        description: packet sequence
        required: true
        schema:
          type: string
          format: uint64
      - name: query_height
        in: query
        description: block height at which to query.
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: QueryIncentivizedPacketsResponse defines the response type
                  for the IncentivizedPacket rpc
                type: object
                properties:
                  incentivized_packet:
                    title: IdentifiedPacketFees contains a list of type PacketFee
                      and associated PacketId
                    type: object
                    properties:
                      packet_id:
                        title: unique packet identifier comprised of the channel ID,
                          port ID and sequence
                        type: object
                        properties:
                          port_id:
                            title: channel port identifier
                            type: string
                          channel_id:
                            title: channel unique identifier
                            type: string
                          sequence:
                            title: packet sequence
                            type: string
                            format: uint64
                      packet_fees:
                        title: list of packet fees
                        type: array
                        items:
                          title: PacketFee contains ICS29 relayer fees, refund address
                            and optional list of permitted relayers
                          type: object
                          properties:
                            fee:
                              title: fee encapsulates the recv, ack and timeout fees
                                associated with an IBC packet
                              type: object
                              properties:
                                recv_fee:
                                  title: the packet receive fee
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      denom:
                                        type: string
                                      amount:
                                        type: string
                                    description: |-
                                      Coin defines a token with a denomination and an amount.

                                      NOTE: The amount field is an Int which implements the custom method
                                      signatures required by gogoproto.
                                ack_fee:
                                  title: the packet acknowledgement fee
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      denom:
                                        type: string
                                      amount:
                                        type: string
                                    description: |-
                                      Coin defines a token with a denomination and an amount.

                                      NOTE: The amount field is an Int which implements the custom method
                                      signatures required by gogoproto.
                                timeout_fee:
                                  title: the packet timeout fee
                                  type: array
                                  items:
                                    type: object
                                    properties:
                                      denom:
                                        type: string
                                      amount:
                                        type: string
                                    description: |-
                                      Coin defines a token with a denomination and an amount.

                                      NOTE: The amount field is an Int which implements the custom method
                                      signatures required by gogoproto.
                            refund_address:
                              title: the refund address for unspent fees
                              type: string
                            relayers:
                              title: optional list of relayers permitted to receive
                                fees
                              type: array
                              items:
                                type: string
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/apps/fee/v1/channels/{packet_id.channel_id}/ports/{packet_id.port_id}/sequences/{packet_id.sequence}/total_ack_fees:
    get:
      tags:
      - Query
      summary: TotalAckFees returns the total acknowledgement fees for a packet given
        its identifier
      operationId: TotalAckFees
      parameters:
      - name: packet_id.channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: packet_id.port_id
        in: path
        description: channel port identifier
        required: true
        schema:
          type: string
      - name: packet_id.sequence
        in: path
        description: packet sequence
        required: true
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: QueryTotalAckFeesResponse defines the response type for the
                  TotalAckFees rpc
                type: object
                properties:
                  ack_fees:
                    title: the total packet acknowledgement fees
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: |-
                        Coin defines a token with a denomination and an amount.

                        NOTE: The amount field is an Int which implements the custom method
                        signatures required by gogoproto.
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/apps/fee/v1/channels/{packet_id.channel_id}/ports/{packet_id.port_id}/sequences/{packet_id.sequence}/total_recv_fees:
    get:
      tags:
      - Query
      summary: TotalRecvFees returns the total receive fees for a packet given its
        identifier
      operationId: TotalRecvFees
      parameters:
      - name: packet_id.channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: packet_id.port_id
        in: path
        description: channel port identifier
        required: true
        schema:
          type: string
      - name: packet_id.sequence
        in: path
        description: packet sequence
        required: true
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: QueryTotalRecvFeesResponse defines the response type for the
                  TotalRecvFees rpc
                type: object
                properties:
                  recv_fees:
                    title: the total packet receive fees
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: |-
                        Coin defines a token with a denomination and an amount.

                        NOTE: The amount field is an Int which implements the custom method
                        signatures required by gogoproto.
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/apps/fee/v1/channels/{packet_id.channel_id}/ports/{packet_id.port_id}/sequences/{packet_id.sequence}/total_timeout_fees:
    get:
      tags:
      - Query
      summary: TotalTimeoutFees returns the total timeout fees for a packet given
        its identifier
      operationId: TotalTimeoutFees
      parameters:
      - name: packet_id.channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: packet_id.port_id
        in: path
        description: channel port identifier
        required: true
        schema:
          type: string
      - name: packet_id.sequence
        in: path
        description: packet sequence
        required: true
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: QueryTotalTimeoutFeesResponse defines the response type for
                  the TotalTimeoutFees rpc
                type: object
                properties:
                  timeout_fees:
                    title: the total packet timeout fees
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: |-
                        Coin defines a token with a denomination and an amount.

                        NOTE: The amount field is an Int which implements the custom method
                        signatures required by gogoproto.
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/apps/fee/v1/fee_enabled:
    get:
      tags:
      - Query
      summary: FeeEnabledChannels returns a list of all fee enabled channels
      operationId: FeeEnabledChannels
      parameters:
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
          format: boolean
      - name: pagination.reverse
        in: query
        description: |-
          reverse is set to true if results are to be returned in the descending order.

          Since: cosmos-sdk 0.43
        schema:
          type: boolean
          format: boolean
      - name: query_height
        in: query
        description: block height at which to query.
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: QueryFeeEnabledChannelsResponse defines the response type for
                  the FeeEnabledChannels rpc
                type: object
                properties:
                  fee_enabled_channels:
                    title: list of fee enabled channels
                    type: array
                    items:
                      title: FeeEnabledChannel contains the PortID & ChannelID for
                        a fee enabled channel
                      type: object
                      properties:
                        port_id:
                          title: unique port identifier
                          type: string
                        channel_id:
                          title: unique channel identifier
                          type: string
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/apps/fee/v1/incentivized_packets:
    get:
      tags:
      - Query
      summary: IncentivizedPackets returns all incentivized packets and their associated
        fees
      operationId: IncentivizedPackets
      parameters:
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
          format: boolean
      - name: pagination.reverse
        in: query
        description: |-
          reverse is set to true if results are to be returned in the descending order.

          Since: cosmos-sdk 0.43
        schema:
          type: boolean
          format: boolean
      - name: query_height
        in: query
        description: block height at which to query.
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: QueryIncentivizedPacketsResponse defines the response type
                  for the IncentivizedPackets rpc
                type: object
                properties:
                  incentivized_packets:
                    title: list of identified fees for incentivized packets
                    type: array
                    items:
                      title: IdentifiedPacketFees contains a list of type PacketFee
                        and associated PacketId
                      type: object
                      properties:
                        packet_id:
                          title: unique packet identifier comprised of the channel
                            ID, port ID and sequence
                          type: object
                          properties:
                            port_id:
                              title: channel port identifier
                              type: string
                            channel_id:
                              title: channel unique identifier
                              type: string
                            sequence:
                              title: packet sequence
                              type: string
                              format: uint64
                        packet_fees:
                          title: list of packet fees
                          type: array
                          items:
                            title: PacketFee contains ICS29 relayer fees, refund address
                              and optional list of permitted relayers
                            type: object
                            properties:
                              fee:
                                title: fee encapsulates the recv, ack and timeout
                                  fees associated with an IBC packet
                                type: object
                                properties:
                                  recv_fee:
                                    title: the packet receive fee
                                    type: array
                                    items:
                                      type: object
                                      properties:
                                        denom:
                                          type: string
                                        amount:
                                          type: string
                                      description: |-
                                        Coin defines a token with a denomination and an amount.

                                        NOTE: The amount field is an Int which implements the custom method
                                        signatures required by gogoproto.
                                  ack_fee:
                                    title: the packet acknowledgement fee
                                    type: array
                                    items:
                                      type: object
                                      properties:
                                        denom:
                                          type: string
                                        amount:
                                          type: string
                                      description: |-
                                        Coin defines a token with a denomination and an amount.

                                        NOTE: The amount field is an Int which implements the custom method
                                        signatures required by gogoproto.
                                  timeout_fee:
                                    title: the packet timeout fee
                                    type: array
                                    items:
                                      type: object
                                      properties:
                                        denom:
                                          type: string
                                        amount:
                                          type: string
                                      description: |-
                                        Coin defines a token with a denomination and an amount.

                                        NOTE: The amount field is an Int which implements the custom method
                                        signatures required by gogoproto.
                              refund_address:
                                title: the refund address for unspent fees
                                type: string
                              relayers:
                                title: optional list of relayers permitted to receive
                                  fees
                                type: array
                                items:
                                  type: string
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/client/v1/params:
    get:
      tags:
      - Query
      summary: ClientParams queries all parameters of the ibc client.
      operationId: ClientParams
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  params:
                    type: object
                    properties:
                      allowed_clients:
                        type: array
                        description: allowed_clients defines the list of allowed client
                          state types.
                        items:
                          type: string
                    description: params defines the parameters of the module.
                description: |-
                  QueryClientParamsResponse is the response type for the Query/ClientParams RPC
                  method.
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/client/v1/client_states:
    get:
      tags:
      - Query
      summary: ClientStates queries all the IBC light clients of a chain.
      operationId: ClientStates
      parameters:
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
          format: boolean
      - name: pagination.reverse
        in: query
        description: |-
          reverse is set to true if results are to be returned in the descending order.

          Since: cosmos-sdk 0.43
        schema:
          type: boolean
          format: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  client_states:
                    type: array
                    description: list of stored ClientStates of the chain.
                    items:
                      type: object
                      properties:
                        client_id:
                          title: client identifier
                          type: string
                        client_state:
                          title: client state
                          type: object
                          properties:
                            type_url:
                              type: string
                              description: |-
                                A URL/resource name that uniquely identifies the type of the serialized
                                protocol buffer message. This string must contain at least
                                one "/" character. The last segment of the URL's path must represent
                                the fully qualified name of the type (as in
                                `path/google.protobuf.Duration`). The name should be in a canonical form
                                (e.g., leading "." is not accepted).

                                In practice, teams usually precompile into the binary all types that they
                                expect it to use in the context of Any. However, for URLs which use the
                                scheme `http`, `https`, or no scheme, one can optionally set up a type
                                server that maps type URLs to message definitions as follows:

                                * If no scheme is provided, `https` is assumed.
                                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently available in the official
                                protobuf release, and it is not used for type URLs beginning with
                                type.googleapis.com.

                                Schemes other than `http`, `https` (or the empty scheme) might be
                                used with implementation specific semantics.
                            value:
                              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                              type: string
                              description: Must be a valid serialized protocol buffer
                                of the above specified type.
                              format: byte
                          description: |-
                            `Any` contains an arbitrary serialized protocol buffer message along with a
                            URL that describes the type of the serialized message.

                            Protobuf library provides support to pack/unpack Any values in the form
                            of utility functions or additional generated methods of the Any type.

                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := ptypes.MarshalAny(foo)
                                 ...
                                 foo := &pb.Foo{}
                                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will by default use
                            'type.googleapis.com/full.type.name' as the type URL and the unpack
                            methods only use the fully qualified type name after the last '/'
                            in the type URL, for example "foo.bar.com/x/y.z" will yield type
                            name "y.z".


                            JSON
                            ====
                            The JSON representation of an `Any` value uses the regular
                            representation of the deserialized, embedded message, with an
                            additional field `@type` which contains the type URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a custom JSON
                            representation, that representation will be embedded adding a field
                            `value` which holds the custom JSON in addition to the `@type`
                            field. Example (for message [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                      description: |-
                        IdentifiedClientState defines a client state with an additional client
                        identifier field.
                  pagination:
                    title: pagination response
                    type: object
                    properties:
                      next_key:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently. It will be empty if
                          there are no more results.
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: |-
                      PageResponse is to be embedded in gRPC response messages where the
                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                description: |-
                  QueryClientStatesResponse is the response type for the Query/ClientStates RPC
                  method.
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/client/v1/client_states/{client_id}:
    get:
      tags:
      - Query
      summary: ClientState queries an IBC light client.
      operationId: ClientState
      parameters:
      - name: client_id
        in: path
        description: client state unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  client_state:
                    title: client state associated with the request identifier
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: |-
                          A URL/resource name that uniquely identifies the type of the serialized
                          protocol buffer message. This string must contain at least
                          one "/" character. The last segment of the URL's path must represent
                          the fully qualified name of the type (as in
                          `path/google.protobuf.Duration`). The name should be in a canonical form
                          (e.g., leading "." is not accepted).

                          In practice, teams usually precompile into the binary all types that they
                          expect it to use in the context of Any. However, for URLs which use the
                          scheme `http`, `https`, or no scheme, one can optionally set up a type
                          server that maps type URLs to message definitions as follows:

                          * If no scheme is provided, `https` is assumed.
                          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in the official
                          protobuf release, and it is not used for type URLs beginning with
                          type.googleapis.com.

                          Schemes other than `http`, `https` (or the empty scheme) might be
                          used with implementation specific semantics.
                      value:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: Must be a valid serialized protocol buffer of
                          the above specified type.
                        format: byte
                    description: |-
                      `Any` contains an arbitrary serialized protocol buffer message along with a
                      URL that describes the type of the serialized message.

                      Protobuf library provides support to pack/unpack Any values in the form
                      of utility functions or additional generated methods of the Any type.

                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by default use
                      'type.googleapis.com/full.type.name' as the type URL and the unpack
                      methods only use the fully qualified type name after the last '/'
                      in the type URL, for example "foo.bar.com/x/y.z" will yield type
                      name "y.z".


                      JSON
                      ====
                      The JSON representation of an `Any` value uses the regular
                      representation of the deserialized, embedded message, with an
                      additional field `@type` which contains the type URL. Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a custom JSON
                      representation, that representation will be embedded adding a field
                      `value` which holds the custom JSON in addition to the `@type`
                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: height at which the proof was retrieved
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping
                      RevisionNumber the same. However some consensus algorithms may choose to
                      reset the height in certain conditions e.g. hard forks, state-machine
                      breaking changes In these cases, the RevisionNumber is incremented so that
                      height continues to be monitonically increasing even as the RevisionHeight
                      gets reset
                description: |-
                  QueryClientStateResponse is the response type for the Query/ClientState RPC
                  method. Besides the client state, it includes a proof and the height from
                  which the proof was retrieved.
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/client/v1/client_status/{client_id}:
    get:
      tags:
      - Query
      summary: Status queries the status of an IBC client.
      operationId: ClientStatus
      parameters:
      - name: client_id
        in: path
        description: client unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  status:
                    type: string
                description: |-
                  QueryClientStatusResponse is the response type for the Query/ClientStatus RPC
                  method. It returns the current status of the IBC client.
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/client/v1/consensus_states/{client_id}:
    get:
      tags:
      - Query
      summary: |-
        ConsensusStates queries all the consensus state associated with a given
        client.
      operationId: ConsensusStates
      parameters:
      - name: client_id
        in: path
        description: client identifier
        required: true
        schema:
          type: string
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
          format: boolean
      - name: pagination.reverse
        in: query
        description: |-
          reverse is set to true if results are to be returned in the descending order.

          Since: cosmos-sdk 0.43
        schema:
          type: boolean
          format: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryConsensusStatesResponse is the response type for the
                  Query/ConsensusStates RPC method
                type: object
                properties:
                  consensus_states:
                    title: consensus states associated with the identifier
                    type: array
                    items:
                      type: object
                      properties:
                        height:
                          title: consensus state height
                          type: object
                          properties:
                            revision_number:
                              title: the revision that the client is currently on
                              type: string
                              format: uint64
                            revision_height:
                              title: the height within the given revision
                              type: string
                              format: uint64
                          description: |-
                            Normally the RevisionHeight is incremented at each height while keeping
                            RevisionNumber the same. However some consensus algorithms may choose to
                            reset the height in certain conditions e.g. hard forks, state-machine
                            breaking changes In these cases, the RevisionNumber is incremented so that
                            height continues to be monitonically increasing even as the RevisionHeight
                            gets reset
                        consensus_state:
                          title: consensus state
                          type: object
                          properties:
                            type_url:
                              type: string
                              description: |-
                                A URL/resource name that uniquely identifies the type of the serialized
                                protocol buffer message. This string must contain at least
                                one "/" character. The last segment of the URL's path must represent
                                the fully qualified name of the type (as in
                                `path/google.protobuf.Duration`). The name should be in a canonical form
                                (e.g., leading "." is not accepted).

                                In practice, teams usually precompile into the binary all types that they
                                expect it to use in the context of Any. However, for URLs which use the
                                scheme `http`, `https`, or no scheme, one can optionally set up a type
                                server that maps type URLs to message definitions as follows:

                                * If no scheme is provided, `https` is assumed.
                                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                                  value in binary format, or produce an error.
                                * Applications are allowed to cache lookup results based on the
                                  URL, or have them precompiled into a binary to avoid any
                                  lookup. Therefore, binary compatibility needs to be preserved
                                  on changes to types. (Use versioned type names to manage
                                  breaking changes.)

                                Note: this functionality is not currently available in the official
                                protobuf release, and it is not used for type URLs beginning with
                                type.googleapis.com.

                                Schemes other than `http`, `https` (or the empty scheme) might be
                                used with implementation specific semantics.
                            value:
                              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                              type: string
                              description: Must be a valid serialized protocol buffer
                                of the above specified type.
                              format: byte
                          description: |-
                            `Any` contains an arbitrary serialized protocol buffer message along with a
                            URL that describes the type of the serialized message.

                            Protobuf library provides support to pack/unpack Any values in the form
                            of utility functions or additional generated methods of the Any type.

                            Example 1: Pack and unpack a message in C++.

                                Foo foo = ...;
                                Any any;
                                any.PackFrom(foo);
                                ...
                                if (any.UnpackTo(&foo)) {
                                  ...
                                }

                            Example 2: Pack and unpack a message in Java.

                                Foo foo = ...;
                                Any any = Any.pack(foo);
                                ...
                                if (any.is(Foo.class)) {
                                  foo = any.unpack(Foo.class);
                                }

                             Example 3: Pack and unpack a message in Python.

                                foo = Foo(...)
                                any = Any()
                                any.Pack(foo)
                                ...
                                if any.Is(Foo.DESCRIPTOR):
                                  any.Unpack(foo)
                                  ...

                             Example 4: Pack and unpack a message in Go

                                 foo := &pb.Foo{...}
                                 any, err := ptypes.MarshalAny(foo)
                                 ...
                                 foo := &pb.Foo{}
                                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                                   ...
                                 }

                            The pack methods provided by protobuf library will by default use
                            'type.googleapis.com/full.type.name' as the type URL and the unpack
                            methods only use the fully qualified type name after the last '/'
                            in the type URL, for example "foo.bar.com/x/y.z" will yield type
                            name "y.z".


                            JSON
                            ====
                            The JSON representation of an `Any` value uses the regular
                            representation of the deserialized, embedded message, with an
                            additional field `@type` which contains the type URL. Example:

                                package google.profile;
                                message Person {
                                  string first_name = 1;
                                  string last_name = 2;
                                }

                                {
                                  "@type": "type.googleapis.com/google.profile.Person",
                                  "firstName": <string>,
                                  "lastName": <string>
                                }

                            If the embedded message type is well-known and has a custom JSON
                            representation, that representation will be embedded adding a field
                            `value` which holds the custom JSON in addition to the `@type`
                            field. Example (for message [google.protobuf.Duration][]):

                                {
                                  "@type": "type.googleapis.com/google.protobuf.Duration",
                                  "value": "1.212s"
                                }
                      description: |-
                        ConsensusStateWithHeight defines a consensus state with an additional height
                        field.
                  pagination:
                    title: pagination response
                    type: object
                    properties:
                      next_key:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently. It will be empty if
                          there are no more results.
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: |-
                      PageResponse is to be embedded in gRPC response messages where the
                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/client/v1/consensus_states/{client_id}/heights:
    get:
      tags:
      - Query
      summary: ConsensusStateHeights queries the height of every consensus states
        associated with a given client.
      operationId: ConsensusStateHeights
      parameters:
      - name: client_id
        in: path
        description: client identifier
        required: true
        schema:
          type: string
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
          format: boolean
      - name: pagination.reverse
        in: query
        description: |-
          reverse is set to true if results are to be returned in the descending order.

          Since: cosmos-sdk 0.43
        schema:
          type: boolean
          format: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryConsensusStateHeightsResponse is the response type for the
                  Query/ConsensusStateHeights RPC method
                type: object
                properties:
                  consensus_state_heights:
                    title: consensus state heights
                    type: array
                    items:
                      title: |-
                        Height is a monotonically increasing data type
                        that can be compared against another Height for the purposes of updating and
                        freezing clients
                      type: object
                      properties:
                        revision_number:
                          title: the revision that the client is currently on
                          type: string
                          format: uint64
                        revision_height:
                          title: the height within the given revision
                          type: string
                          format: uint64
                      description: |-
                        Normally the RevisionHeight is incremented at each height while keeping
                        RevisionNumber the same. However some consensus algorithms may choose to
                        reset the height in certain conditions e.g. hard forks, state-machine
                        breaking changes In these cases, the RevisionNumber is incremented so that
                        height continues to be monitonically increasing even as the RevisionHeight
                        gets reset
                  pagination:
                    title: pagination response
                    type: object
                    properties:
                      next_key:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently. It will be empty if
                          there are no more results.
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: |-
                      PageResponse is to be embedded in gRPC response messages where the
                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/client/v1/consensus_states/{client_id}/revision/{revision_number}/height/{revision_height}:
    get:
      tags:
      - Query
      summary: |-
        ConsensusState queries a consensus state associated with a client state at
        a given height.
      operationId: ConsensusState
      parameters:
      - name: client_id
        in: path
        description: client identifier
        required: true
        schema:
          type: string
      - name: revision_number
        in: path
        description: consensus state revision number
        required: true
        schema:
          type: string
          format: uint64
      - name: revision_height
        in: path
        description: consensus state revision height
        required: true
        schema:
          type: string
          format: uint64
      - name: latest_height
        in: query
        description: |-
          latest_height overrrides the height field and queries the latest stored
          ConsensusState.
        schema:
          type: boolean
          format: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryConsensusStateResponse is the response type for the Query/ConsensusState
                  RPC method
                type: object
                properties:
                  consensus_state:
                    title: consensus state associated with the client identifier at
                      the given height
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: |-
                          A URL/resource name that uniquely identifies the type of the serialized
                          protocol buffer message. This string must contain at least
                          one "/" character. The last segment of the URL's path must represent
                          the fully qualified name of the type (as in
                          `path/google.protobuf.Duration`). The name should be in a canonical form
                          (e.g., leading "." is not accepted).

                          In practice, teams usually precompile into the binary all types that they
                          expect it to use in the context of Any. However, for URLs which use the
                          scheme `http`, `https`, or no scheme, one can optionally set up a type
                          server that maps type URLs to message definitions as follows:

                          * If no scheme is provided, `https` is assumed.
                          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in the official
                          protobuf release, and it is not used for type URLs beginning with
                          type.googleapis.com.

                          Schemes other than `http`, `https` (or the empty scheme) might be
                          used with implementation specific semantics.
                      value:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: Must be a valid serialized protocol buffer of
                          the above specified type.
                        format: byte
                    description: |-
                      `Any` contains an arbitrary serialized protocol buffer message along with a
                      URL that describes the type of the serialized message.

                      Protobuf library provides support to pack/unpack Any values in the form
                      of utility functions or additional generated methods of the Any type.

                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by default use
                      'type.googleapis.com/full.type.name' as the type URL and the unpack
                      methods only use the fully qualified type name after the last '/'
                      in the type URL, for example "foo.bar.com/x/y.z" will yield type
                      name "y.z".


                      JSON
                      ====
                      The JSON representation of an `Any` value uses the regular
                      representation of the deserialized, embedded message, with an
                      additional field `@type` which contains the type URL. Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a custom JSON
                      representation, that representation will be embedded adding a field
                      `value` which holds the custom JSON in addition to the `@type`
                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: |-
                      Height is a monotonically increasing data type
                      that can be compared against another Height for the purposes of updating and
                      freezing clients
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping
                      RevisionNumber the same. However some consensus algorithms may choose to
                      reset the height in certain conditions e.g. hard forks, state-machine
                      breaking changes In these cases, the RevisionNumber is incremented so that
                      height continues to be monitonically increasing even as the RevisionHeight
                      gets reset
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/client/v1/upgraded_client_states:
    get:
      tags:
      - Query
      summary: UpgradedClientState queries an Upgraded IBC light client.
      operationId: UpgradedClientState
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  upgraded_client_state:
                    title: client state associated with the request identifier
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: |-
                          A URL/resource name that uniquely identifies the type of the serialized
                          protocol buffer message. This string must contain at least
                          one "/" character. The last segment of the URL's path must represent
                          the fully qualified name of the type (as in
                          `path/google.protobuf.Duration`). The name should be in a canonical form
                          (e.g., leading "." is not accepted).

                          In practice, teams usually precompile into the binary all types that they
                          expect it to use in the context of Any. However, for URLs which use the
                          scheme `http`, `https`, or no scheme, one can optionally set up a type
                          server that maps type URLs to message definitions as follows:

                          * If no scheme is provided, `https` is assumed.
                          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in the official
                          protobuf release, and it is not used for type URLs beginning with
                          type.googleapis.com.

                          Schemes other than `http`, `https` (or the empty scheme) might be
                          used with implementation specific semantics.
                      value:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: Must be a valid serialized protocol buffer of
                          the above specified type.
                        format: byte
                    description: |-
                      `Any` contains an arbitrary serialized protocol buffer message along with a
                      URL that describes the type of the serialized message.

                      Protobuf library provides support to pack/unpack Any values in the form
                      of utility functions or additional generated methods of the Any type.

                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by default use
                      'type.googleapis.com/full.type.name' as the type URL and the unpack
                      methods only use the fully qualified type name after the last '/'
                      in the type URL, for example "foo.bar.com/x/y.z" will yield type
                      name "y.z".


                      JSON
                      ====
                      The JSON representation of an `Any` value uses the regular
                      representation of the deserialized, embedded message, with an
                      additional field `@type` which contains the type URL. Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a custom JSON
                      representation, that representation will be embedded adding a field
                      `value` which holds the custom JSON in addition to the `@type`
                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                description: |-
                  QueryUpgradedClientStateResponse is the response type for the
                  Query/UpgradedClientState RPC method.
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/client/v1/upgraded_consensus_states:
    get:
      tags:
      - Query
      summary: UpgradedConsensusState queries an Upgraded IBC consensus state.
      operationId: UpgradedConsensusState
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  upgraded_consensus_state:
                    title: Consensus state associated with the request identifier
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: |-
                          A URL/resource name that uniquely identifies the type of the serialized
                          protocol buffer message. This string must contain at least
                          one "/" character. The last segment of the URL's path must represent
                          the fully qualified name of the type (as in
                          `path/google.protobuf.Duration`). The name should be in a canonical form
                          (e.g., leading "." is not accepted).

                          In practice, teams usually precompile into the binary all types that they
                          expect it to use in the context of Any. However, for URLs which use the
                          scheme `http`, `https`, or no scheme, one can optionally set up a type
                          server that maps type URLs to message definitions as follows:

                          * If no scheme is provided, `https` is assumed.
                          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in the official
                          protobuf release, and it is not used for type URLs beginning with
                          type.googleapis.com.

                          Schemes other than `http`, `https` (or the empty scheme) might be
                          used with implementation specific semantics.
                      value:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: Must be a valid serialized protocol buffer of
                          the above specified type.
                        format: byte
                    description: |-
                      `Any` contains an arbitrary serialized protocol buffer message along with a
                      URL that describes the type of the serialized message.

                      Protobuf library provides support to pack/unpack Any values in the form
                      of utility functions or additional generated methods of the Any type.

                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by default use
                      'type.googleapis.com/full.type.name' as the type URL and the unpack
                      methods only use the fully qualified type name after the last '/'
                      in the type URL, for example "foo.bar.com/x/y.z" will yield type
                      name "y.z".


                      JSON
                      ====
                      The JSON representation of an `Any` value uses the regular
                      representation of the deserialized, embedded message, with an
                      additional field `@type` which contains the type URL. Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a custom JSON
                      representation, that representation will be embedded adding a field
                      `value` which holds the custom JSON in addition to the `@type`
                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                description: |-
                  QueryUpgradedConsensusStateResponse is the response type for the
                  Query/UpgradedConsensusState RPC method.
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/connection/v1/client_connections/{client_id}:
    get:
      tags:
      - Query
      summary: |-
        ClientConnections queries the connection paths associated with a client
        state.
      operationId: ClientConnections
      parameters:
      - name: client_id
        in: path
        description: client identifier associated with a connection
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryClientConnectionsResponse is the response type for the
                  Query/ClientConnections RPC method
                type: object
                properties:
                  connection_paths:
                    type: array
                    description: slice of all the connection paths associated with
                      a client.
                    items:
                      type: string
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: height at which the proof was generated
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping
                      RevisionNumber the same. However some consensus algorithms may choose to
                      reset the height in certain conditions e.g. hard forks, state-machine
                      breaking changes In these cases, the RevisionNumber is incremented so that
                      height continues to be monitonically increasing even as the RevisionHeight
                      gets reset
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/connection/v1/connections:
    get:
      tags:
      - Query
      summary: Connections queries all the IBC connections of a chain.
      operationId: Connections
      parameters:
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
          format: boolean
      - name: pagination.reverse
        in: query
        description: |-
          reverse is set to true if results are to be returned in the descending order.

          Since: cosmos-sdk 0.43
        schema:
          type: boolean
          format: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  connections:
                    type: array
                    description: list of stored connections of the chain.
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          description: connection identifier.
                        client_id:
                          type: string
                          description: client associated with this connection.
                        versions:
                          title: |-
                            IBC version which can be utilised to determine encodings or protocols for
                            channels or packets utilising this connection
                          type: array
                          items:
                            type: object
                            properties:
                              identifier:
                                title: unique version identifier
                                type: string
                              features:
                                title: list of features compatible with the specified
                                  identifier
                                type: array
                                items:
                                  type: string
                            description: |-
                              Version defines the versioning scheme used to negotiate the IBC verison in
                              the connection handshake.
                        state:
                          type: string
                          description: current state of the connection end.
                          default: STATE_UNINITIALIZED_UNSPECIFIED
                          enum:
                          - STATE_UNINITIALIZED_UNSPECIFIED
                          - STATE_INIT
                          - STATE_TRYOPEN
                          - STATE_OPEN
                        counterparty:
                          type: object
                          properties:
                            client_id:
                              type: string
                              description: |-
                                identifies the client on the counterparty chain associated with a given
                                connection.
                            connection_id:
                              type: string
                              description: |-
                                identifies the connection end on the counterparty chain associated with a
                                given connection.
                            prefix:
                              title: |-
                                MerklePrefix is merkle path prefixed to the key.
                                The constructed key from the Path and the key will be append(Path.KeyPath,
                                append(Path.KeyPrefix, key...))
                              type: object
                              properties:
                                key_prefix:
                                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                                  type: string
                                  format: byte
                              description: commitment merkle prefix of the counterparty
                                chain.
                          description: counterparty chain associated with this connection.
                        delay_period:
                          type: string
                          description: delay period associated with this connection.
                          format: uint64
                      description: |-
                        IdentifiedConnection defines a connection with additional connection
                        identifier field.
                  pagination:
                    title: pagination response
                    type: object
                    properties:
                      next_key:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently. It will be empty if
                          there are no more results.
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: |-
                      PageResponse is to be embedded in gRPC response messages where the
                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                  height:
                    title: query block height
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping
                      RevisionNumber the same. However some consensus algorithms may choose to
                      reset the height in certain conditions e.g. hard forks, state-machine
                      breaking changes In these cases, the RevisionNumber is incremented so that
                      height continues to be monitonically increasing even as the RevisionHeight
                      gets reset
                description: |-
                  QueryConnectionsResponse is the response type for the Query/Connections RPC
                  method.
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/connection/v1/connections/{connection_id}:
    get:
      tags:
      - Query
      summary: Connection queries an IBC connection end.
      operationId: Connection
      parameters:
      - name: connection_id
        in: path
        description: connection unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  connection:
                    title: connection associated with the request identifier
                    type: object
                    properties:
                      client_id:
                        type: string
                        description: client associated with this connection.
                      versions:
                        type: array
                        description: |-
                          IBC version which can be utilised to determine encodings or protocols for
                          channels or packets utilising this connection.
                        items:
                          type: object
                          properties:
                            identifier:
                              title: unique version identifier
                              type: string
                            features:
                              title: list of features compatible with the specified
                                identifier
                              type: array
                              items:
                                type: string
                          description: |-
                            Version defines the versioning scheme used to negotiate the IBC verison in
                            the connection handshake.
                      state:
                        type: string
                        description: current state of the connection end.
                        default: STATE_UNINITIALIZED_UNSPECIFIED
                        enum:
                        - STATE_UNINITIALIZED_UNSPECIFIED
                        - STATE_INIT
                        - STATE_TRYOPEN
                        - STATE_OPEN
                      counterparty:
                        type: object
                        properties:
                          client_id:
                            type: string
                            description: |-
                              identifies the client on the counterparty chain associated with a given
                              connection.
                          connection_id:
                            type: string
                            description: |-
                              identifies the connection end on the counterparty chain associated with a
                              given connection.
                          prefix:
                            title: |-
                              MerklePrefix is merkle path prefixed to the key.
                              The constructed key from the Path and the key will be append(Path.KeyPath,
                              append(Path.KeyPrefix, key...))
                            type: object
                            properties:
                              key_prefix:
                                pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                                type: string
                                format: byte
                            description: commitment merkle prefix of the counterparty
                              chain.
                        description: counterparty chain associated with this connection.
                      delay_period:
                        type: string
                        description: |-
                          delay period that must pass before a consensus state can be used for
                          packet-verification NOTE: delay period logic is only implemented by some
                          clients.
                        format: uint64
                    description: |-
                      ConnectionEnd defines a stateful object on a chain connected to another
                      separate one.
                      NOTE: there must only be 2 defined ConnectionEnds to establish
                      a connection between two chains.
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: height at which the proof was retrieved
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping
                      RevisionNumber the same. However some consensus algorithms may choose to
                      reset the height in certain conditions e.g. hard forks, state-machine
                      breaking changes In these cases, the RevisionNumber is incremented so that
                      height continues to be monitonically increasing even as the RevisionHeight
                      gets reset
                description: |-
                  QueryConnectionResponse is the response type for the Query/Connection RPC
                  method. Besides the connection end, it includes a proof and the height from
                  which the proof was retrieved.
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/connection/v1/connections/{connection_id}/client_state:
    get:
      tags:
      - Query
      summary: |-
        ConnectionClientState queries the client state associated with the
        connection.
      operationId: ConnectionClientState
      parameters:
      - name: connection_id
        in: path
        description: connection identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryConnectionClientStateResponse is the response type for the
                  Query/ConnectionClientState RPC method
                type: object
                properties:
                  identified_client_state:
                    title: client state associated with the channel
                    type: object
                    properties:
                      client_id:
                        title: client identifier
                        type: string
                      client_state:
                        title: client state
                        type: object
                        properties:
                          type_url:
                            type: string
                            description: |-
                              A URL/resource name that uniquely identifies the type of the serialized
                              protocol buffer message. This string must contain at least
                              one "/" character. The last segment of the URL's path must represent
                              the fully qualified name of the type (as in
                              `path/google.protobuf.Duration`). The name should be in a canonical form
                              (e.g., leading "." is not accepted).

                              In practice, teams usually precompile into the binary all types that they
                              expect it to use in the context of Any. However, for URLs which use the
                              scheme `http`, `https`, or no scheme, one can optionally set up a type
                              server that maps type URLs to message definitions as follows:

                              * If no scheme is provided, `https` is assumed.
                              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently available in the official
                              protobuf release, and it is not used for type URLs beginning with
                              type.googleapis.com.

                              Schemes other than `http`, `https` (or the empty scheme) might be
                              used with implementation specific semantics.
                          value:
                            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                            type: string
                            description: Must be a valid serialized protocol buffer
                              of the above specified type.
                            format: byte
                        description: |-
                          `Any` contains an arbitrary serialized protocol buffer message along with a
                          URL that describes the type of the serialized message.

                          Protobuf library provides support to pack/unpack Any values in the form
                          of utility functions or additional generated methods of the Any type.

                          Example 1: Pack and unpack a message in C++.

                              Foo foo = ...;
                              Any any;
                              any.PackFrom(foo);
                              ...
                              if (any.UnpackTo(&foo)) {
                                ...
                              }

                          Example 2: Pack and unpack a message in Java.

                              Foo foo = ...;
                              Any any = Any.pack(foo);
                              ...
                              if (any.is(Foo.class)) {
                                foo = any.unpack(Foo.class);
                              }

                           Example 3: Pack and unpack a message in Python.

                              foo = Foo(...)
                              any = Any()
                              any.Pack(foo)
                              ...
                              if any.Is(Foo.DESCRIPTOR):
                                any.Unpack(foo)
                                ...

                           Example 4: Pack and unpack a message in Go

                               foo := &pb.Foo{...}
                               any, err := ptypes.MarshalAny(foo)
                               ...
                               foo := &pb.Foo{}
                               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                                 ...
                               }

                          The pack methods provided by protobuf library will by default use
                          'type.googleapis.com/full.type.name' as the type URL and the unpack
                          methods only use the fully qualified type name after the last '/'
                          in the type URL, for example "foo.bar.com/x/y.z" will yield type
                          name "y.z".


                          JSON
                          ====
                          The JSON representation of an `Any` value uses the regular
                          representation of the deserialized, embedded message, with an
                          additional field `@type` which contains the type URL. Example:

                              package google.profile;
                              message Person {
                                string first_name = 1;
                                string last_name = 2;
                              }

                              {
                                "@type": "type.googleapis.com/google.profile.Person",
                                "firstName": <string>,
                                "lastName": <string>
                              }

                          If the embedded message type is well-known and has a custom JSON
                          representation, that representation will be embedded adding a field
                          `value` which holds the custom JSON in addition to the `@type`
                          field. Example (for message [google.protobuf.Duration][]):

                              {
                                "@type": "type.googleapis.com/google.protobuf.Duration",
                                "value": "1.212s"
                              }
                    description: |-
                      IdentifiedClientState defines a client state with an additional client
                      identifier field.
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: height at which the proof was retrieved
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping
                      RevisionNumber the same. However some consensus algorithms may choose to
                      reset the height in certain conditions e.g. hard forks, state-machine
                      breaking changes In these cases, the RevisionNumber is incremented so that
                      height continues to be monitonically increasing even as the RevisionHeight
                      gets reset
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/connection/v1/connections/{connection_id}/consensus_state/revision/{revision_number}/height/{revision_height}:
    get:
      tags:
      - Query
      summary: |-
        ConnectionConsensusState queries the consensus state associated with the
        connection.
      operationId: ConnectionConsensusState
      parameters:
      - name: connection_id
        in: path
        description: connection identifier
        required: true
        schema:
          type: string
      - name: revision_number
        in: path
        required: true
        schema:
          type: string
          format: uint64
      - name: revision_height
        in: path
        required: true
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryConnectionConsensusStateResponse is the response type for the
                  Query/ConnectionConsensusState RPC method
                type: object
                properties:
                  consensus_state:
                    title: consensus state associated with the channel
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: |-
                          A URL/resource name that uniquely identifies the type of the serialized
                          protocol buffer message. This string must contain at least
                          one "/" character. The last segment of the URL's path must represent
                          the fully qualified name of the type (as in
                          `path/google.protobuf.Duration`). The name should be in a canonical form
                          (e.g., leading "." is not accepted).

                          In practice, teams usually precompile into the binary all types that they
                          expect it to use in the context of Any. However, for URLs which use the
                          scheme `http`, `https`, or no scheme, one can optionally set up a type
                          server that maps type URLs to message definitions as follows:

                          * If no scheme is provided, `https` is assumed.
                          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in the official
                          protobuf release, and it is not used for type URLs beginning with
                          type.googleapis.com.

                          Schemes other than `http`, `https` (or the empty scheme) might be
                          used with implementation specific semantics.
                      value:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: Must be a valid serialized protocol buffer of
                          the above specified type.
                        format: byte
                    description: |-
                      `Any` contains an arbitrary serialized protocol buffer message along with a
                      URL that describes the type of the serialized message.

                      Protobuf library provides support to pack/unpack Any values in the form
                      of utility functions or additional generated methods of the Any type.

                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by default use
                      'type.googleapis.com/full.type.name' as the type URL and the unpack
                      methods only use the fully qualified type name after the last '/'
                      in the type URL, for example "foo.bar.com/x/y.z" will yield type
                      name "y.z".


                      JSON
                      ====
                      The JSON representation of an `Any` value uses the regular
                      representation of the deserialized, embedded message, with an
                      additional field `@type` which contains the type URL. Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a custom JSON
                      representation, that representation will be embedded adding a field
                      `value` which holds the custom JSON in addition to the `@type`
                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                  client_id:
                    title: client ID associated with the consensus state
                    type: string
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: height at which the proof was retrieved
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping
                      RevisionNumber the same. However some consensus algorithms may choose to
                      reset the height in certain conditions e.g. hard forks, state-machine
                      breaking changes In these cases, the RevisionNumber is incremented so that
                      height continues to be monitonically increasing even as the RevisionHeight
                      gets reset
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/channel/v1/channels:
    get:
      tags:
      - Query
      summary: Channels queries all the IBC channels of a chain.
      operationId: Channels
      parameters:
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
          format: boolean
      - name: pagination.reverse
        in: query
        description: |-
          reverse is set to true if results are to be returned in the descending order.

          Since: cosmos-sdk 0.43
        schema:
          type: boolean
          format: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  channels:
                    type: array
                    description: list of stored channels of the chain.
                    items:
                      type: object
                      properties:
                        state:
                          title: current state of the channel end
                          type: string
                          description: |-
                            State defines if a channel is in one of the following states:
                            CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                             - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                             - STATE_INIT: A channel has just started the opening handshake.
                             - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                             - STATE_OPEN: A channel has completed the handshake. Open channels are
                            ready to send and receive packets.
                             - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                            packets.
                          default: STATE_UNINITIALIZED_UNSPECIFIED
                          enum:
                          - STATE_UNINITIALIZED_UNSPECIFIED
                          - STATE_INIT
                          - STATE_TRYOPEN
                          - STATE_OPEN
                          - STATE_CLOSED
                        ordering:
                          title: whether the channel is ordered or unordered
                          type: string
                          description: |-
                            - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                             - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                            which they were sent.
                             - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                          default: ORDER_NONE_UNSPECIFIED
                          enum:
                          - ORDER_NONE_UNSPECIFIED
                          - ORDER_UNORDERED
                          - ORDER_ORDERED
                        counterparty:
                          title: counterparty channel end
                          type: object
                          properties:
                            port_id:
                              type: string
                              description: port on the counterparty chain which owns
                                the other end of the channel.
                            channel_id:
                              title: channel end on the counterparty chain
                              type: string
                        connection_hops:
                          title: |-
                            list of connection identifiers, in order, along which packets sent on
                            this channel will travel
                          type: array
                          items:
                            type: string
                        version:
                          title: opaque channel version, which is agreed upon during
                            the handshake
                          type: string
                        port_id:
                          title: port identifier
                          type: string
                        channel_id:
                          title: channel identifier
                          type: string
                      description: |-
                        IdentifiedChannel defines a channel with additional port and channel
                        identifier fields.
                  pagination:
                    title: pagination response
                    type: object
                    properties:
                      next_key:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently. It will be empty if
                          there are no more results.
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: |-
                      PageResponse is to be embedded in gRPC response messages where the
                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                  height:
                    title: query block height
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping
                      RevisionNumber the same. However some consensus algorithms may choose to
                      reset the height in certain conditions e.g. hard forks, state-machine
                      breaking changes In these cases, the RevisionNumber is incremented so that
                      height continues to be monitonically increasing even as the RevisionHeight
                      gets reset
                description: QueryChannelsResponse is the response type for the Query/Channels
                  RPC method.
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}:
    get:
      tags:
      - Query
      summary: Channel queries an IBC Channel.
      operationId: Channel
      parameters:
      - name: channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: port_id
        in: path
        description: port unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                type: object
                properties:
                  channel:
                    title: channel associated with the request identifiers
                    type: object
                    properties:
                      state:
                        title: current state of the channel end
                        type: string
                        description: |-
                          State defines if a channel is in one of the following states:
                          CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                           - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                           - STATE_INIT: A channel has just started the opening handshake.
                           - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                           - STATE_OPEN: A channel has completed the handshake. Open channels are
                          ready to send and receive packets.
                           - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                          packets.
                        default: STATE_UNINITIALIZED_UNSPECIFIED
                        enum:
                        - STATE_UNINITIALIZED_UNSPECIFIED
                        - STATE_INIT
                        - STATE_TRYOPEN
                        - STATE_OPEN
                        - STATE_CLOSED
                      ordering:
                        title: whether the channel is ordered or unordered
                        type: string
                        description: |-
                          - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                           - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                          which they were sent.
                           - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                        default: ORDER_NONE_UNSPECIFIED
                        enum:
                        - ORDER_NONE_UNSPECIFIED
                        - ORDER_UNORDERED
                        - ORDER_ORDERED
                      counterparty:
                        title: counterparty channel end
                        type: object
                        properties:
                          port_id:
                            type: string
                            description: port on the counterparty chain which owns
                              the other end of the channel.
                          channel_id:
                            title: channel end on the counterparty chain
                            type: string
                      connection_hops:
                        title: |-
                          list of connection identifiers, in order, along which packets sent on
                          this channel will travel
                        type: array
                        items:
                          type: string
                      version:
                        title: opaque channel version, which is agreed upon during
                          the handshake
                        type: string
                    description: |-
                      Channel defines pipeline for exactly-once packet delivery between specific
                      modules on separate blockchains, which has at least one end capable of
                      sending packets and one end capable of receiving packets.
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: height at which the proof was retrieved
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping
                      RevisionNumber the same. However some consensus algorithms may choose to
                      reset the height in certain conditions e.g. hard forks, state-machine
                      breaking changes In these cases, the RevisionNumber is incremented so that
                      height continues to be monitonically increasing even as the RevisionHeight
                      gets reset
                description: |-
                  QueryChannelResponse is the response type for the Query/Channel RPC method.
                  Besides the Channel end, it includes a proof and the height from which the
                  proof was retrieved.
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/client_state:
    get:
      tags:
      - Query
      summary: |-
        ChannelClientState queries for the client state for the channel associated
        with the provided channel identifiers.
      operationId: ChannelClientState
      parameters:
      - name: channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: port_id
        in: path
        description: port unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryChannelClientStateResponse is the Response type for the
                  Query/QueryChannelClientState RPC method
                type: object
                properties:
                  identified_client_state:
                    title: client state associated with the channel
                    type: object
                    properties:
                      client_id:
                        title: client identifier
                        type: string
                      client_state:
                        title: client state
                        type: object
                        properties:
                          type_url:
                            type: string
                            description: |-
                              A URL/resource name that uniquely identifies the type of the serialized
                              protocol buffer message. This string must contain at least
                              one "/" character. The last segment of the URL's path must represent
                              the fully qualified name of the type (as in
                              `path/google.protobuf.Duration`). The name should be in a canonical form
                              (e.g., leading "." is not accepted).

                              In practice, teams usually precompile into the binary all types that they
                              expect it to use in the context of Any. However, for URLs which use the
                              scheme `http`, `https`, or no scheme, one can optionally set up a type
                              server that maps type URLs to message definitions as follows:

                              * If no scheme is provided, `https` is assumed.
                              * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                                value in binary format, or produce an error.
                              * Applications are allowed to cache lookup results based on the
                                URL, or have them precompiled into a binary to avoid any
                                lookup. Therefore, binary compatibility needs to be preserved
                                on changes to types. (Use versioned type names to manage
                                breaking changes.)

                              Note: this functionality is not currently available in the official
                              protobuf release, and it is not used for type URLs beginning with
                              type.googleapis.com.

                              Schemes other than `http`, `https` (or the empty scheme) might be
                              used with implementation specific semantics.
                          value:
                            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                            type: string
                            description: Must be a valid serialized protocol buffer
                              of the above specified type.
                            format: byte
                        description: |-
                          `Any` contains an arbitrary serialized protocol buffer message along with a
                          URL that describes the type of the serialized message.

                          Protobuf library provides support to pack/unpack Any values in the form
                          of utility functions or additional generated methods of the Any type.

                          Example 1: Pack and unpack a message in C++.

                              Foo foo = ...;
                              Any any;
                              any.PackFrom(foo);
                              ...
                              if (any.UnpackTo(&foo)) {
                                ...
                              }

                          Example 2: Pack and unpack a message in Java.

                              Foo foo = ...;
                              Any any = Any.pack(foo);
                              ...
                              if (any.is(Foo.class)) {
                                foo = any.unpack(Foo.class);
                              }

                           Example 3: Pack and unpack a message in Python.

                              foo = Foo(...)
                              any = Any()
                              any.Pack(foo)
                              ...
                              if any.Is(Foo.DESCRIPTOR):
                                any.Unpack(foo)
                                ...

                           Example 4: Pack and unpack a message in Go

                               foo := &pb.Foo{...}
                               any, err := ptypes.MarshalAny(foo)
                               ...
                               foo := &pb.Foo{}
                               if err := ptypes.UnmarshalAny(any, foo); err != nil {
                                 ...
                               }

                          The pack methods provided by protobuf library will by default use
                          'type.googleapis.com/full.type.name' as the type URL and the unpack
                          methods only use the fully qualified type name after the last '/'
                          in the type URL, for example "foo.bar.com/x/y.z" will yield type
                          name "y.z".


                          JSON
                          ====
                          The JSON representation of an `Any` value uses the regular
                          representation of the deserialized, embedded message, with an
                          additional field `@type` which contains the type URL. Example:

                              package google.profile;
                              message Person {
                                string first_name = 1;
                                string last_name = 2;
                              }

                              {
                                "@type": "type.googleapis.com/google.profile.Person",
                                "firstName": <string>,
                                "lastName": <string>
                              }

                          If the embedded message type is well-known and has a custom JSON
                          representation, that representation will be embedded adding a field
                          `value` which holds the custom JSON in addition to the `@type`
                          field. Example (for message [google.protobuf.Duration][]):

                              {
                                "@type": "type.googleapis.com/google.protobuf.Duration",
                                "value": "1.212s"
                              }
                    description: |-
                      IdentifiedClientState defines a client state with an additional client
                      identifier field.
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: height at which the proof was retrieved
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping
                      RevisionNumber the same. However some consensus algorithms may choose to
                      reset the height in certain conditions e.g. hard forks, state-machine
                      breaking changes In these cases, the RevisionNumber is incremented so that
                      height continues to be monitonically increasing even as the RevisionHeight
                      gets reset
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/consensus_state/revision/{revision_number}/height/{revision_height}:
    get:
      tags:
      - Query
      summary: |-
        ChannelConsensusState queries for the consensus state for the channel
        associated with the provided channel identifiers.
      operationId: ChannelConsensusState
      parameters:
      - name: channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: port_id
        in: path
        description: port unique identifier
        required: true
        schema:
          type: string
      - name: revision_number
        in: path
        description: revision number of the consensus state
        required: true
        schema:
          type: string
          format: uint64
      - name: revision_height
        in: path
        description: revision height of the consensus state
        required: true
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryChannelClientStateResponse is the Response type for the
                  Query/QueryChannelClientState RPC method
                type: object
                properties:
                  consensus_state:
                    title: consensus state associated with the channel
                    type: object
                    properties:
                      type_url:
                        type: string
                        description: |-
                          A URL/resource name that uniquely identifies the type of the serialized
                          protocol buffer message. This string must contain at least
                          one "/" character. The last segment of the URL's path must represent
                          the fully qualified name of the type (as in
                          `path/google.protobuf.Duration`). The name should be in a canonical form
                          (e.g., leading "." is not accepted).

                          In practice, teams usually precompile into the binary all types that they
                          expect it to use in the context of Any. However, for URLs which use the
                          scheme `http`, `https`, or no scheme, one can optionally set up a type
                          server that maps type URLs to message definitions as follows:

                          * If no scheme is provided, `https` is assumed.
                          * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                            value in binary format, or produce an error.
                          * Applications are allowed to cache lookup results based on the
                            URL, or have them precompiled into a binary to avoid any
                            lookup. Therefore, binary compatibility needs to be preserved
                            on changes to types. (Use versioned type names to manage
                            breaking changes.)

                          Note: this functionality is not currently available in the official
                          protobuf release, and it is not used for type URLs beginning with
                          type.googleapis.com.

                          Schemes other than `http`, `https` (or the empty scheme) might be
                          used with implementation specific semantics.
                      value:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: Must be a valid serialized protocol buffer of
                          the above specified type.
                        format: byte
                    description: |-
                      `Any` contains an arbitrary serialized protocol buffer message along with a
                      URL that describes the type of the serialized message.

                      Protobuf library provides support to pack/unpack Any values in the form
                      of utility functions or additional generated methods of the Any type.

                      Example 1: Pack and unpack a message in C++.

                          Foo foo = ...;
                          Any any;
                          any.PackFrom(foo);
                          ...
                          if (any.UnpackTo(&foo)) {
                            ...
                          }

                      Example 2: Pack and unpack a message in Java.

                          Foo foo = ...;
                          Any any = Any.pack(foo);
                          ...
                          if (any.is(Foo.class)) {
                            foo = any.unpack(Foo.class);
                          }

                       Example 3: Pack and unpack a message in Python.

                          foo = Foo(...)
                          any = Any()
                          any.Pack(foo)
                          ...
                          if any.Is(Foo.DESCRIPTOR):
                            any.Unpack(foo)
                            ...

                       Example 4: Pack and unpack a message in Go

                           foo := &pb.Foo{...}
                           any, err := ptypes.MarshalAny(foo)
                           ...
                           foo := &pb.Foo{}
                           if err := ptypes.UnmarshalAny(any, foo); err != nil {
                             ...
                           }

                      The pack methods provided by protobuf library will by default use
                      'type.googleapis.com/full.type.name' as the type URL and the unpack
                      methods only use the fully qualified type name after the last '/'
                      in the type URL, for example "foo.bar.com/x/y.z" will yield type
                      name "y.z".


                      JSON
                      ====
                      The JSON representation of an `Any` value uses the regular
                      representation of the deserialized, embedded message, with an
                      additional field `@type` which contains the type URL. Example:

                          package google.profile;
                          message Person {
                            string first_name = 1;
                            string last_name = 2;
                          }

                          {
                            "@type": "type.googleapis.com/google.profile.Person",
                            "firstName": <string>,
                            "lastName": <string>
                          }

                      If the embedded message type is well-known and has a custom JSON
                      representation, that representation will be embedded adding a field
                      `value` which holds the custom JSON in addition to the `@type`
                      field. Example (for message [google.protobuf.Duration][]):

                          {
                            "@type": "type.googleapis.com/google.protobuf.Duration",
                            "value": "1.212s"
                          }
                  client_id:
                    title: client ID associated with the consensus state
                    type: string
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: height at which the proof was retrieved
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping
                      RevisionNumber the same. However some consensus algorithms may choose to
                      reset the height in certain conditions e.g. hard forks, state-machine
                      breaking changes In these cases, the RevisionNumber is incremented so that
                      height continues to be monitonically increasing even as the RevisionHeight
                      gets reset
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/next_sequence:
    get:
      tags:
      - Query
      summary: NextSequenceReceive returns the next receive sequence for a given channel.
      operationId: NextSequenceReceive
      parameters:
      - name: channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: port_id
        in: path
        description: port unique identifier
        required: true
        schema:
          type: string
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QuerySequenceResponse is the request type for the
                  Query/QueryNextSequenceReceiveResponse RPC method
                type: object
                properties:
                  next_sequence_receive:
                    title: next sequence receive number
                    type: string
                    format: uint64
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: height at which the proof was retrieved
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping
                      RevisionNumber the same. However some consensus algorithms may choose to
                      reset the height in certain conditions e.g. hard forks, state-machine
                      breaking changes In these cases, the RevisionNumber is incremented so that
                      height continues to be monitonically increasing even as the RevisionHeight
                      gets reset
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_acknowledgements:
    get:
      tags:
      - Query
      summary: |-
        PacketAcknowledgements returns all the packet acknowledgements associated
        with a channel.
      operationId: PacketAcknowledgements
      parameters:
      - name: channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: port_id
        in: path
        description: port unique identifier
        required: true
        schema:
          type: string
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
          format: boolean
      - name: pagination.reverse
        in: query
        description: |-
          reverse is set to true if results are to be returned in the descending order.

          Since: cosmos-sdk 0.43
        schema:
          type: boolean
          format: boolean
      - name: packet_commitment_sequences
        in: query
        description: list of packet sequences.
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryPacketAcknowledgemetsResponse is the request type for the
                  Query/QueryPacketAcknowledgements RPC method
                type: object
                properties:
                  acknowledgements:
                    type: array
                    items:
                      type: object
                      properties:
                        port_id:
                          type: string
                          description: channel port identifier.
                        channel_id:
                          type: string
                          description: channel unique identifier.
                        sequence:
                          type: string
                          description: packet sequence.
                          format: uint64
                        data:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: embedded data that represents packet state.
                          format: byte
                      description: |-
                        PacketState defines the generic type necessary to retrieve and store
                        packet commitments, acknowledgements, and receipts.
                        Caller is responsible for knowing the context necessary to interpret this
                        state as a commitment, acknowledgement, or a receipt.
                  pagination:
                    title: pagination response
                    type: object
                    properties:
                      next_key:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently. It will be empty if
                          there are no more results.
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: |-
                      PageResponse is to be embedded in gRPC response messages where the
                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                  height:
                    title: query block height
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping
                      RevisionNumber the same. However some consensus algorithms may choose to
                      reset the height in certain conditions e.g. hard forks, state-machine
                      breaking changes In these cases, the RevisionNumber is incremented so that
                      height continues to be monitonically increasing even as the RevisionHeight
                      gets reset
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_acks/{sequence}:
    get:
      tags:
      - Query
      summary: PacketAcknowledgement queries a stored packet acknowledgement hash.
      operationId: PacketAcknowledgement
      parameters:
      - name: channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: port_id
        in: path
        description: port unique identifier
        required: true
        schema:
          type: string
      - name: sequence
        in: path
        description: packet sequence
        required: true
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryPacketAcknowledgementResponse defines the client query response for a
                  packet which also includes a proof and the height from which the
                  proof was retrieved
                type: object
                properties:
                  acknowledgement:
                    title: packet associated with the request fields
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: height at which the proof was retrieved
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping
                      RevisionNumber the same. However some consensus algorithms may choose to
                      reset the height in certain conditions e.g. hard forks, state-machine
                      breaking changes In these cases, the RevisionNumber is incremented so that
                      height continues to be monitonically increasing even as the RevisionHeight
                      gets reset
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments:
    get:
      tags:
      - Query
      summary: |-
        PacketCommitments returns all the packet commitments hashes associated
        with a channel.
      operationId: PacketCommitments
      parameters:
      - name: channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: port_id
        in: path
        description: port unique identifier
        required: true
        schema:
          type: string
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
          format: boolean
      - name: pagination.reverse
        in: query
        description: |-
          reverse is set to true if results are to be returned in the descending order.

          Since: cosmos-sdk 0.43
        schema:
          type: boolean
          format: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryPacketCommitmentsResponse is the request type for the
                  Query/QueryPacketCommitments RPC method
                type: object
                properties:
                  commitments:
                    type: array
                    items:
                      type: object
                      properties:
                        port_id:
                          type: string
                          description: channel port identifier.
                        channel_id:
                          type: string
                          description: channel unique identifier.
                        sequence:
                          type: string
                          description: packet sequence.
                          format: uint64
                        data:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: embedded data that represents packet state.
                          format: byte
                      description: |-
                        PacketState defines the generic type necessary to retrieve and store
                        packet commitments, acknowledgements, and receipts.
                        Caller is responsible for knowing the context necessary to interpret this
                        state as a commitment, acknowledgement, or a receipt.
                  pagination:
                    title: pagination response
                    type: object
                    properties:
                      next_key:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently. It will be empty if
                          there are no more results.
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: |-
                      PageResponse is to be embedded in gRPC response messages where the
                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                  height:
                    title: query block height
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping
                      RevisionNumber the same. However some consensus algorithms may choose to
                      reset the height in certain conditions e.g. hard forks, state-machine
                      breaking changes In these cases, the RevisionNumber is incremented so that
                      height continues to be monitonically increasing even as the RevisionHeight
                      gets reset
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments/{packet_ack_sequences}/unreceived_acks:
    get:
      tags:
      - Query
      summary: |-
        UnreceivedAcks returns all the unreceived IBC acknowledgements associated
        with a channel and sequences.
      operationId: UnreceivedAcks
      parameters:
      - name: channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: port_id
        in: path
        description: port unique identifier
        required: true
        schema:
          type: string
      - name: packet_ack_sequences
        in: path
        description: list of acknowledgement sequences
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: string
            format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryUnreceivedAcksResponse is the response type for the
                  Query/UnreceivedAcks RPC method
                type: object
                properties:
                  sequences:
                    title: list of unreceived acknowledgement sequences
                    type: array
                    items:
                      type: string
                      format: uint64
                  height:
                    title: query block height
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping
                      RevisionNumber the same. However some consensus algorithms may choose to
                      reset the height in certain conditions e.g. hard forks, state-machine
                      breaking changes In these cases, the RevisionNumber is incremented so that
                      height continues to be monitonically increasing even as the RevisionHeight
                      gets reset
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments/{packet_commitment_sequences}/unreceived_packets:
    get:
      tags:
      - Query
      summary: |-
        UnreceivedPackets returns all the unreceived IBC packets associated with a
        channel and sequences.
      operationId: UnreceivedPackets
      parameters:
      - name: channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: port_id
        in: path
        description: port unique identifier
        required: true
        schema:
          type: string
      - name: packet_commitment_sequences
        in: path
        description: list of packet sequences
        required: true
        style: simple
        explode: false
        schema:
          minItems: 1
          type: array
          items:
            type: string
            format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryUnreceivedPacketsResponse is the response type for the
                  Query/UnreceivedPacketCommitments RPC method
                type: object
                properties:
                  sequences:
                    title: list of unreceived packet sequences
                    type: array
                    items:
                      type: string
                      format: uint64
                  height:
                    title: query block height
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping
                      RevisionNumber the same. However some consensus algorithms may choose to
                      reset the height in certain conditions e.g. hard forks, state-machine
                      breaking changes In these cases, the RevisionNumber is incremented so that
                      height continues to be monitonically increasing even as the RevisionHeight
                      gets reset
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_commitments/{sequence}:
    get:
      tags:
      - Query
      summary: PacketCommitment queries a stored packet commitment hash.
      operationId: PacketCommitment
      parameters:
      - name: channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: port_id
        in: path
        description: port unique identifier
        required: true
        schema:
          type: string
      - name: sequence
        in: path
        description: packet sequence
        required: true
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryPacketCommitmentResponse defines the client query response for a packet
                  which also includes a proof and the height from which the proof was
                  retrieved
                type: object
                properties:
                  commitment:
                    title: packet associated with the request fields
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: height at which the proof was retrieved
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping
                      RevisionNumber the same. However some consensus algorithms may choose to
                      reset the height in certain conditions e.g. hard forks, state-machine
                      breaking changes In these cases, the RevisionNumber is incremented so that
                      height continues to be monitonically increasing even as the RevisionHeight
                      gets reset
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/channel/v1/channels/{channel_id}/ports/{port_id}/packet_receipts/{sequence}:
    get:
      tags:
      - Query
      summary: |-
        PacketReceipt queries if a given packet sequence has been received on the
        queried chain
      operationId: PacketReceipt
      parameters:
      - name: channel_id
        in: path
        description: channel unique identifier
        required: true
        schema:
          type: string
      - name: port_id
        in: path
        description: port unique identifier
        required: true
        schema:
          type: string
      - name: sequence
        in: path
        description: packet sequence
        required: true
        schema:
          type: string
          format: uint64
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryPacketReceiptResponse defines the client query response for a packet
                  receipt which also includes a proof, and the height from which the proof was
                  retrieved
                type: object
                properties:
                  received:
                    title: success flag for if receipt exists
                    type: boolean
                    format: boolean
                  proof:
                    title: merkle proof of existence
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    format: byte
                  proof_height:
                    title: height at which the proof was retrieved
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping
                      RevisionNumber the same. However some consensus algorithms may choose to
                      reset the height in certain conditions e.g. hard forks, state-machine
                      breaking changes In these cases, the RevisionNumber is incremented so that
                      height continues to be monitonically increasing even as the RevisionHeight
                      gets reset
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
  /ibc/core/channel/v1/connections/{connection}/channels:
    get:
      tags:
      - Query
      summary: |-
        ConnectionChannels queries all the channels associated with a connection
        end.
      operationId: ConnectionChannels
      parameters:
      - name: connection
        in: path
        description: connection unique identifier
        required: true
        schema:
          type: string
      - name: pagination.key
        in: query
        description: |-
          key is a value returned in PageResponse.next_key to begin
          querying the next page most efficiently. Only one of offset or key
          should be set.
        schema:
          type: string
          format: byte
      - name: pagination.offset
        in: query
        description: |-
          offset is a numeric offset that can be used when key is unavailable.
          It is less efficient than using key. Only one of offset or key should
          be set.
        schema:
          type: string
          format: uint64
      - name: pagination.limit
        in: query
        description: |-
          limit is the total number of results to be returned in the result page.
          If left empty it will default to a value to be set by each app.
        schema:
          type: string
          format: uint64
      - name: pagination.count_total
        in: query
        description: |-
          count_total is set to true  to indicate that the result set should include
          a count of the total number of items available for pagination in UIs.
          count_total is only respected when offset is used. It is ignored when key
          is set.
        schema:
          type: boolean
          format: boolean
      - name: pagination.reverse
        in: query
        description: |-
          reverse is set to true if results are to be returned in the descending order.

          Since: cosmos-sdk 0.43
        schema:
          type: boolean
          format: boolean
      responses:
        200:
          description: A successful response.
          content:
            '*/*':
              schema:
                title: |-
                  QueryConnectionChannelsResponse is the Response type for the
                  Query/QueryConnectionChannels RPC method
                type: object
                properties:
                  channels:
                    type: array
                    description: list of channels associated with a connection.
                    items:
                      type: object
                      properties:
                        state:
                          title: current state of the channel end
                          type: string
                          description: |-
                            State defines if a channel is in one of the following states:
                            CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                             - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                             - STATE_INIT: A channel has just started the opening handshake.
                             - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                             - STATE_OPEN: A channel has completed the handshake. Open channels are
                            ready to send and receive packets.
                             - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                            packets.
                          default: STATE_UNINITIALIZED_UNSPECIFIED
                          enum:
                          - STATE_UNINITIALIZED_UNSPECIFIED
                          - STATE_INIT
                          - STATE_TRYOPEN
                          - STATE_OPEN
                          - STATE_CLOSED
                        ordering:
                          title: whether the channel is ordered or unordered
                          type: string
                          description: |-
                            - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                             - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                            which they were sent.
                             - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                          default: ORDER_NONE_UNSPECIFIED
                          enum:
                          - ORDER_NONE_UNSPECIFIED
                          - ORDER_UNORDERED
                          - ORDER_ORDERED
                        counterparty:
                          title: counterparty channel end
                          type: object
                          properties:
                            port_id:
                              type: string
                              description: port on the counterparty chain which owns
                                the other end of the channel.
                            channel_id:
                              title: channel end on the counterparty chain
                              type: string
                        connection_hops:
                          title: |-
                            list of connection identifiers, in order, along which packets sent on
                            this channel will travel
                          type: array
                          items:
                            type: string
                        version:
                          title: opaque channel version, which is agreed upon during
                            the handshake
                          type: string
                        port_id:
                          title: port identifier
                          type: string
                        channel_id:
                          title: channel identifier
                          type: string
                      description: |-
                        IdentifiedChannel defines a channel with additional port and channel
                        identifier fields.
                  pagination:
                    title: pagination response
                    type: object
                    properties:
                      next_key:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        description: |-
                          next_key is the key to be passed to PageRequest.key to
                          query the next page most efficiently. It will be empty if
                          there are no more results.
                        format: byte
                      total:
                        title: |-
                          total is total number of results available if PageRequest.count_total
                          was set, its value is undefined otherwise
                        type: string
                        format: uint64
                    description: |-
                      PageResponse is to be embedded in gRPC response messages where the
                      corresponding request message has used PageRequest.

                       message SomeResponse {
                               repeated Bar results = 1;
                               PageResponse page = 2;
                       }
                  height:
                    title: query block height
                    type: object
                    properties:
                      revision_number:
                        title: the revision that the client is currently on
                        type: string
                        format: uint64
                      revision_height:
                        title: the height within the given revision
                        type: string
                        format: uint64
                    description: |-
                      Normally the RevisionHeight is incremented at each height while keeping
                      RevisionNumber the same. However some consensus algorithms may choose to
                      reset the height in certain conditions e.g. hard forks, state-machine
                      breaking changes In these cases, the RevisionNumber is incremented so that
                      height continues to be monitonically increasing even as the RevisionHeight
                      gets reset
        default:
          description: An unexpected error response
          content:
            '*/*':
              schema:
                type: object
                properties:
                  error:
                    type: string
                  code:
                    type: integer
                    format: int32
                  message:
                    type: string
                  details:
                    type: array
                    items:
                      type: object
                      properties:
                        type_url:
                          type: string
                          description: |-
                            A URL/resource name that uniquely identifies the type of the serialized
                            protocol buffer message. This string must contain at least
                            one "/" character. The last segment of the URL's path must represent
                            the fully qualified name of the type (as in
                            `path/google.protobuf.Duration`). The name should be in a canonical form
                            (e.g., leading "." is not accepted).

                            In practice, teams usually precompile into the binary all types that they
                            expect it to use in the context of Any. However, for URLs which use the
                            scheme `http`, `https`, or no scheme, one can optionally set up a type
                            server that maps type URLs to message definitions as follows:

                            * If no scheme is provided, `https` is assumed.
                            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                              value in binary format, or produce an error.
                            * Applications are allowed to cache lookup results based on the
                              URL, or have them precompiled into a binary to avoid any
                              lookup. Therefore, binary compatibility needs to be preserved
                              on changes to types. (Use versioned type names to manage
                              breaking changes.)

                            Note: this functionality is not currently available in the official
                            protobuf release, and it is not used for type URLs beginning with
                            type.googleapis.com.

                            Schemes other than `http`, `https` (or the empty scheme) might be
                            used with implementation specific semantics.
                        value:
                          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                          type: string
                          description: Must be a valid serialized protocol buffer
                            of the above specified type.
                          format: byte
                      description: |-
                        `Any` contains an arbitrary serialized protocol buffer message along with a
                        URL that describes the type of the serialized message.

                        Protobuf library provides support to pack/unpack Any values in the form
                        of utility functions or additional generated methods of the Any type.

                        Example 1: Pack and unpack a message in C++.

                            Foo foo = ...;
                            Any any;
                            any.PackFrom(foo);
                            ...
                            if (any.UnpackTo(&foo)) {
                              ...
                            }

                        Example 2: Pack and unpack a message in Java.

                            Foo foo = ...;
                            Any any = Any.pack(foo);
                            ...
                            if (any.is(Foo.class)) {
                              foo = any.unpack(Foo.class);
                            }

                         Example 3: Pack and unpack a message in Python.

                            foo = Foo(...)
                            any = Any()
                            any.Pack(foo)
                            ...
                            if any.Is(Foo.DESCRIPTOR):
                              any.Unpack(foo)
                              ...

                         Example 4: Pack and unpack a message in Go

                             foo := &pb.Foo{...}
                             any, err := ptypes.MarshalAny(foo)
                             ...
                             foo := &pb.Foo{}
                             if err := ptypes.UnmarshalAny(any, foo); err != nil {
                               ...
                             }

                        The pack methods provided by protobuf library will by default use
                        'type.googleapis.com/full.type.name' as the type URL and the unpack
                        methods only use the fully qualified type name after the last '/'
                        in the type URL, for example "foo.bar.com/x/y.z" will yield type
                        name "y.z".


                        JSON
                        ====
                        The JSON representation of an `Any` value uses the regular
                        representation of the deserialized, embedded message, with an
                        additional field `@type` which contains the type URL. Example:

                            package google.profile;
                            message Person {
                              string first_name = 1;
                              string last_name = 2;
                            }

                            {
                              "@type": "type.googleapis.com/google.profile.Person",
                              "firstName": <string>,
                              "lastName": <string>
                            }

                        If the embedded message type is well-known and has a custom JSON
                        representation, that representation will be embedded adding a field
                        `value` which holds the custom JSON in addition to the `@type`
                        field. Example (for message [google.protobuf.Duration][]):

                            {
                              "@type": "type.googleapis.com/google.protobuf.Duration",
                              "value": "1.212s"
                            }
components:
  schemas:
    cosmos.base.query.v1beta1.PageRequest:
      title: |-
        PageRequest is to be embedded in gRPC request messages for efficient
        pagination. Ex:
      type: object
      properties:
        key:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: |-
            key is a value returned in PageResponse.next_key to begin
            querying the next page most efficiently. Only one of offset or key
            should be set.
          format: byte
        offset:
          type: string
          description: |-
            offset is a numeric offset that can be used when key is unavailable.
            It is less efficient than using key. Only one of offset or key should
            be set.
          format: uint64
        limit:
          type: string
          description: |-
            limit is the total number of results to be returned in the result page.
            If left empty it will default to a value to be set by each app.
          format: uint64
        count_total:
          type: boolean
          description: |-
            count_total is set to true  to indicate that the result set should include
            a count of the total number of items available for pagination in UIs.
            count_total is only respected when offset is used. It is ignored when key
            is set.
          format: boolean
        reverse:
          type: boolean
          description: |-
            reverse is set to true if results are to be returned in the descending order.

            Since: cosmos-sdk 0.43
          format: boolean
      description: |-
        message SomeRequest {
                 Foo some_parameter = 1;
                 PageRequest pagination = 2;
         }
    cosmos.base.query.v1beta1.PageResponse:
      type: object
      properties:
        next_key:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: |-
            next_key is the key to be passed to PageRequest.key to
            query the next page most efficiently. It will be empty if
            there are no more results.
          format: byte
        total:
          title: |-
            total is total number of results available if PageRequest.count_total
            was set, its value is undefined otherwise
          type: string
          format: uint64
      description: |-
        PageResponse is to be embedded in gRPC response messages where the
        corresponding request message has used PageRequest.

         message SomeResponse {
                 repeated Bar results = 1;
                 PageResponse page = 2;
         }
    google.protobuf.Any:
      type: object
      properties:
        type_url:
          type: string
          description: |-
            A URL/resource name that uniquely identifies the type of the serialized
            protocol buffer message. This string must contain at least
            one "/" character. The last segment of the URL's path must represent
            the fully qualified name of the type (as in
            `path/google.protobuf.Duration`). The name should be in a canonical form
            (e.g., leading "." is not accepted).

            In practice, teams usually precompile into the binary all types that they
            expect it to use in the context of Any. However, for URLs which use the
            scheme `http`, `https`, or no scheme, one can optionally set up a type
            server that maps type URLs to message definitions as follows:

            * If no scheme is provided, `https` is assumed.
            * An HTTP GET on the URL must yield a [google.protobuf.Type][]
              value in binary format, or produce an error.
            * Applications are allowed to cache lookup results based on the
              URL, or have them precompiled into a binary to avoid any
              lookup. Therefore, binary compatibility needs to be preserved
              on changes to types. (Use versioned type names to manage
              breaking changes.)

            Note: this functionality is not currently available in the official
            protobuf release, and it is not used for type URLs beginning with
            type.googleapis.com.

            Schemes other than `http`, `https` (or the empty scheme) might be
            used with implementation specific semantics.
        value:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: Must be a valid serialized protocol buffer of the above specified
            type.
          format: byte
      description: |-
        `Any` contains an arbitrary serialized protocol buffer message along with a
        URL that describes the type of the serialized message.

        Protobuf library provides support to pack/unpack Any values in the form
        of utility functions or additional generated methods of the Any type.

        Example 1: Pack and unpack a message in C++.

            Foo foo = ...;
            Any any;
            any.PackFrom(foo);
            ...
            if (any.UnpackTo(&foo)) {
              ...
            }

        Example 2: Pack and unpack a message in Java.

            Foo foo = ...;
            Any any = Any.pack(foo);
            ...
            if (any.is(Foo.class)) {
              foo = any.unpack(Foo.class);
            }

         Example 3: Pack and unpack a message in Python.

            foo = Foo(...)
            any = Any()
            any.Pack(foo)
            ...
            if any.Is(Foo.DESCRIPTOR):
              any.Unpack(foo)
              ...

         Example 4: Pack and unpack a message in Go

             foo := &pb.Foo{...}
             any, err := ptypes.MarshalAny(foo)
             ...
             foo := &pb.Foo{}
             if err := ptypes.UnmarshalAny(any, foo); err != nil {
               ...
             }

        The pack methods provided by protobuf library will by default use
        'type.googleapis.com/full.type.name' as the type URL and the unpack
        methods only use the fully qualified type name after the last '/'
        in the type URL, for example "foo.bar.com/x/y.z" will yield type
        name "y.z".


        JSON
        ====
        The JSON representation of an `Any` value uses the regular
        representation of the deserialized, embedded message, with an
        additional field `@type` which contains the type URL. Example:

            package google.profile;
            message Person {
              string first_name = 1;
              string last_name = 2;
            }

            {
              "@type": "type.googleapis.com/google.profile.Person",
              "firstName": <string>,
              "lastName": <string>
            }

        If the embedded message type is well-known and has a custom JSON
        representation, that representation will be embedded adding a field
        `value` which holds the custom JSON in addition to the `@type`
        field. Example (for message [google.protobuf.Duration][]):

            {
              "@type": "type.googleapis.com/google.protobuf.Duration",
              "value": "1.212s"
            }
    grpc.gateway.runtime.Error:
      type: object
      properties:
        error:
          type: string
        code:
          type: integer
          format: int32
        message:
          type: string
        details:
          type: array
          items:
            type: object
            properties:
              type_url:
                type: string
                description: |-
                  A URL/resource name that uniquely identifies the type of the serialized
                  protocol buffer message. This string must contain at least
                  one "/" character. The last segment of the URL's path must represent
                  the fully qualified name of the type (as in
                  `path/google.protobuf.Duration`). The name should be in a canonical form
                  (e.g., leading "." is not accepted).

                  In practice, teams usually precompile into the binary all types that they
                  expect it to use in the context of Any. However, for URLs which use the
                  scheme `http`, `https`, or no scheme, one can optionally set up a type
                  server that maps type URLs to message definitions as follows:

                  * If no scheme is provided, `https` is assumed.
                  * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                    value in binary format, or produce an error.
                  * Applications are allowed to cache lookup results based on the
                    URL, or have them precompiled into a binary to avoid any
                    lookup. Therefore, binary compatibility needs to be preserved
                    on changes to types. (Use versioned type names to manage
                    breaking changes.)

                  Note: this functionality is not currently available in the official
                  protobuf release, and it is not used for type URLs beginning with
                  type.googleapis.com.

                  Schemes other than `http`, `https` (or the empty scheme) might be
                  used with implementation specific semantics.
              value:
                pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                type: string
                description: Must be a valid serialized protocol buffer of the above
                  specified type.
                format: byte
            description: |-
              `Any` contains an arbitrary serialized protocol buffer message along with a
              URL that describes the type of the serialized message.

              Protobuf library provides support to pack/unpack Any values in the form
              of utility functions or additional generated methods of the Any type.

              Example 1: Pack and unpack a message in C++.

                  Foo foo = ...;
                  Any any;
                  any.PackFrom(foo);
                  ...
                  if (any.UnpackTo(&foo)) {
                    ...
                  }

              Example 2: Pack and unpack a message in Java.

                  Foo foo = ...;
                  Any any = Any.pack(foo);
                  ...
                  if (any.is(Foo.class)) {
                    foo = any.unpack(Foo.class);
                  }

               Example 3: Pack and unpack a message in Python.

                  foo = Foo(...)
                  any = Any()
                  any.Pack(foo)
                  ...
                  if any.Is(Foo.DESCRIPTOR):
                    any.Unpack(foo)
                    ...

               Example 4: Pack and unpack a message in Go

                   foo := &pb.Foo{...}
                   any, err := ptypes.MarshalAny(foo)
                   ...
                   foo := &pb.Foo{}
                   if err := ptypes.UnmarshalAny(any, foo); err != nil {
                     ...
                   }

              The pack methods provided by protobuf library will by default use
              'type.googleapis.com/full.type.name' as the type URL and the unpack
              methods only use the fully qualified type name after the last '/'
              in the type URL, for example "foo.bar.com/x/y.z" will yield type
              name "y.z".


              JSON
              ====
              The JSON representation of an `Any` value uses the regular
              representation of the deserialized, embedded message, with an
              additional field `@type` which contains the type URL. Example:

                  package google.profile;
                  message Person {
                    string first_name = 1;
                    string last_name = 2;
                  }

                  {
                    "@type": "type.googleapis.com/google.profile.Person",
                    "firstName": <string>,
                    "lastName": <string>
                  }

              If the embedded message type is well-known and has a custom JSON
              representation, that representation will be embedded adding a field
              `value` which holds the custom JSON in addition to the `@type`
              field. Example (for message [google.protobuf.Duration][]):

                  {
                    "@type": "type.googleapis.com/google.protobuf.Duration",
                    "value": "1.212s"
                  }
    ibc.applications.transfer.v1.DenomTrace:
      type: object
      properties:
        path:
          type: string
          description: |-
            path defines the chain of port/channel identifiers used for tracing the
            source of the fungible token.
        base_denom:
          type: string
          description: base denomination of the relayed fungible token.
      description: |-
        DenomTrace contains the base denomination for ICS20 fungible tokens and the
        source tracing information path.
    ibc.applications.transfer.v1.Params:
      type: object
      properties:
        send_enabled:
          type: boolean
          description: |-
            send_enabled enables or disables all cross-chain token transfers from this
            chain.
          format: boolean
        receive_enabled:
          type: boolean
          description: |-
            receive_enabled enables or disables all cross-chain token transfers to this
            chain.
          format: boolean
      description: |-
        Params defines the set of IBC transfer parameters.
        NOTE: To prevent a single token from being transferred, set the
        TransfersEnabled parameter to true and then set the bank module's SendEnabled
        parameter for the denomination to false.
    ibc.applications.transfer.v1.QueryDenomHashResponse:
      type: object
      properties:
        hash:
          type: string
          description: hash (in hex format) of the denomination trace information.
      description: |-
        QueryDenomHashResponse is the response type for the Query/DenomHash RPC
        method.
    ibc.applications.transfer.v1.QueryDenomTraceResponse:
      type: object
      properties:
        denom_trace:
          type: object
          properties:
            path:
              type: string
              description: |-
                path defines the chain of port/channel identifiers used for tracing the
                source of the fungible token.
            base_denom:
              type: string
              description: base denomination of the relayed fungible token.
          description: |-
            DenomTrace contains the base denomination for ICS20 fungible tokens and the
            source tracing information path.
      description: |-
        QueryDenomTraceResponse is the response type for the Query/DenomTrace RPC
        method.
    ibc.applications.transfer.v1.QueryDenomTracesResponse:
      type: object
      properties:
        denom_traces:
          type: array
          description: denom_traces returns all denominations trace information.
          items:
            type: object
            properties:
              path:
                type: string
                description: |-
                  path defines the chain of port/channel identifiers used for tracing the
                  source of the fungible token.
              base_denom:
                type: string
                description: base denomination of the relayed fungible token.
            description: |-
              DenomTrace contains the base denomination for ICS20 fungible tokens and the
              source tracing information path.
        pagination:
          type: object
          properties:
            next_key:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: pagination defines the pagination in the response.
      description: |-
        QueryConnectionsResponse is the response type for the Query/DenomTraces RPC
        method.
    ibc.applications.transfer.v1.QueryEscrowAddressResponse:
      type: object
      properties:
        escrow_address:
          title: the escrow account address
          type: string
      description: QueryEscrowAddressResponse is the response type of the EscrowAddress
        RPC method.
    ibc.applications.transfer.v1.QueryParamsResponse:
      type: object
      properties:
        params:
          type: object
          properties:
            send_enabled:
              type: boolean
              description: |-
                send_enabled enables or disables all cross-chain token transfers from this
                chain.
              format: boolean
            receive_enabled:
              type: boolean
              description: |-
                receive_enabled enables or disables all cross-chain token transfers to this
                chain.
              format: boolean
          description: params defines the parameters of the module.
      description: QueryParamsResponse is the response type for the Query/Params RPC
        method.
    ibc.applications.interchain_accounts.controller.v1.Params:
      type: object
      properties:
        controller_enabled:
          type: boolean
          description: controller_enabled enables or disables the controller submodule.
          format: boolean
      description: |-
        Params defines the set of on-chain interchain accounts parameters.
        The following parameters may be used to disable the controller submodule.
    ibc.applications.interchain_accounts.controller.v1.QueryInterchainAccountResponse:
      type: object
      properties:
        address:
          type: string
      description: QueryInterchainAccountResponse the response type for the Query/InterchainAccount
        RPC method.
    ibc.applications.interchain_accounts.controller.v1.QueryParamsResponse:
      type: object
      properties:
        params:
          type: object
          properties:
            controller_enabled:
              type: boolean
              description: controller_enabled enables or disables the controller submodule.
              format: boolean
          description: params defines the parameters of the module.
      description: QueryParamsResponse is the response type for the Query/Params RPC
        method.
    ibc.applications.interchain_accounts.host.v1.Params:
      type: object
      properties:
        host_enabled:
          type: boolean
          description: host_enabled enables or disables the host submodule.
          format: boolean
        allow_messages:
          type: array
          description: allow_messages defines a list of sdk message typeURLs allowed
            to be executed on a host chain.
          items:
            type: string
      description: |-
        Params defines the set of on-chain interchain accounts parameters.
        The following parameters may be used to disable the host submodule.
    ibc.applications.interchain_accounts.host.v1.QueryParamsResponse:
      type: object
      properties:
        params:
          type: object
          properties:
            host_enabled:
              type: boolean
              description: host_enabled enables or disables the host submodule.
              format: boolean
            allow_messages:
              type: array
              description: allow_messages defines a list of sdk message typeURLs allowed
                to be executed on a host chain.
              items:
                type: string
          description: params defines the parameters of the module.
      description: QueryParamsResponse is the response type for the Query/Params RPC
        method.
    cosmos.base.v1beta1.Coin:
      type: object
      properties:
        denom:
          type: string
        amount:
          type: string
      description: |-
        Coin defines a token with a denomination and an amount.

        NOTE: The amount field is an Int which implements the custom method
        signatures required by gogoproto.
    ibc.applications.fee.v1.Fee:
      title: Fee defines the ICS29 receive, acknowledgement and timeout fees
      type: object
      properties:
        recv_fee:
          title: the packet receive fee
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
        ack_fee:
          title: the packet acknowledgement fee
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
        timeout_fee:
          title: the packet timeout fee
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
    ibc.applications.fee.v1.FeeEnabledChannel:
      title: FeeEnabledChannel contains the PortID & ChannelID for a fee enabled channel
      type: object
      properties:
        port_id:
          title: unique port identifier
          type: string
        channel_id:
          title: unique channel identifier
          type: string
    ibc.applications.fee.v1.IdentifiedPacketFees:
      title: IdentifiedPacketFees contains a list of type PacketFee and associated
        PacketId
      type: object
      properties:
        packet_id:
          title: unique packet identifier comprised of the channel ID, port ID and
            sequence
          type: object
          properties:
            port_id:
              title: channel port identifier
              type: string
            channel_id:
              title: channel unique identifier
              type: string
            sequence:
              title: packet sequence
              type: string
              format: uint64
        packet_fees:
          title: list of packet fees
          type: array
          items:
            title: PacketFee contains ICS29 relayer fees, refund address and optional
              list of permitted relayers
            type: object
            properties:
              fee:
                title: fee encapsulates the recv, ack and timeout fees associated
                  with an IBC packet
                type: object
                properties:
                  recv_fee:
                    title: the packet receive fee
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: |-
                        Coin defines a token with a denomination and an amount.

                        NOTE: The amount field is an Int which implements the custom method
                        signatures required by gogoproto.
                  ack_fee:
                    title: the packet acknowledgement fee
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: |-
                        Coin defines a token with a denomination and an amount.

                        NOTE: The amount field is an Int which implements the custom method
                        signatures required by gogoproto.
                  timeout_fee:
                    title: the packet timeout fee
                    type: array
                    items:
                      type: object
                      properties:
                        denom:
                          type: string
                        amount:
                          type: string
                      description: |-
                        Coin defines a token with a denomination and an amount.

                        NOTE: The amount field is an Int which implements the custom method
                        signatures required by gogoproto.
              refund_address:
                title: the refund address for unspent fees
                type: string
              relayers:
                title: optional list of relayers permitted to receive fees
                type: array
                items:
                  type: string
    ibc.applications.fee.v1.PacketFee:
      title: PacketFee contains ICS29 relayer fees, refund address and optional list
        of permitted relayers
      type: object
      properties:
        fee:
          title: fee encapsulates the recv, ack and timeout fees associated with an
            IBC packet
          type: object
          properties:
            recv_fee:
              title: the packet receive fee
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: |-
                  Coin defines a token with a denomination and an amount.

                  NOTE: The amount field is an Int which implements the custom method
                  signatures required by gogoproto.
            ack_fee:
              title: the packet acknowledgement fee
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: |-
                  Coin defines a token with a denomination and an amount.

                  NOTE: The amount field is an Int which implements the custom method
                  signatures required by gogoproto.
            timeout_fee:
              title: the packet timeout fee
              type: array
              items:
                type: object
                properties:
                  denom:
                    type: string
                  amount:
                    type: string
                description: |-
                  Coin defines a token with a denomination and an amount.

                  NOTE: The amount field is an Int which implements the custom method
                  signatures required by gogoproto.
        refund_address:
          title: the refund address for unspent fees
          type: string
        relayers:
          title: optional list of relayers permitted to receive fees
          type: array
          items:
            type: string
    ibc.applications.fee.v1.QueryCounterpartyPayeeResponse:
      title: QueryCounterpartyPayeeResponse defines the response type for the CounterpartyPayee
        rpc
      type: object
      properties:
        counterparty_payee:
          title: the counterparty payee address used to compensate forward relaying
          type: string
    ibc.applications.fee.v1.QueryFeeEnabledChannelResponse:
      title: QueryFeeEnabledChannelResponse defines the response type for the FeeEnabledChannel
        rpc
      type: object
      properties:
        fee_enabled:
          title: boolean flag representing the fee enabled channel status
          type: boolean
          format: boolean
    ibc.applications.fee.v1.QueryFeeEnabledChannelsResponse:
      title: QueryFeeEnabledChannelsResponse defines the response type for the FeeEnabledChannels
        rpc
      type: object
      properties:
        fee_enabled_channels:
          title: list of fee enabled channels
          type: array
          items:
            title: FeeEnabledChannel contains the PortID & ChannelID for a fee enabled
              channel
            type: object
            properties:
              port_id:
                title: unique port identifier
                type: string
              channel_id:
                title: unique channel identifier
                type: string
    ibc.applications.fee.v1.QueryIncentivizedPacketResponse:
      title: QueryIncentivizedPacketsResponse defines the response type for the IncentivizedPacket
        rpc
      type: object
      properties:
        incentivized_packet:
          title: IdentifiedPacketFees contains a list of type PacketFee and associated
            PacketId
          type: object
          properties:
            packet_id:
              title: unique packet identifier comprised of the channel ID, port ID
                and sequence
              type: object
              properties:
                port_id:
                  title: channel port identifier
                  type: string
                channel_id:
                  title: channel unique identifier
                  type: string
                sequence:
                  title: packet sequence
                  type: string
                  format: uint64
            packet_fees:
              title: list of packet fees
              type: array
              items:
                title: PacketFee contains ICS29 relayer fees, refund address and optional
                  list of permitted relayers
                type: object
                properties:
                  fee:
                    title: fee encapsulates the recv, ack and timeout fees associated
                      with an IBC packet
                    type: object
                    properties:
                      recv_fee:
                        title: the packet receive fee
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: |-
                            Coin defines a token with a denomination and an amount.

                            NOTE: The amount field is an Int which implements the custom method
                            signatures required by gogoproto.
                      ack_fee:
                        title: the packet acknowledgement fee
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: |-
                            Coin defines a token with a denomination and an amount.

                            NOTE: The amount field is an Int which implements the custom method
                            signatures required by gogoproto.
                      timeout_fee:
                        title: the packet timeout fee
                        type: array
                        items:
                          type: object
                          properties:
                            denom:
                              type: string
                            amount:
                              type: string
                          description: |-
                            Coin defines a token with a denomination and an amount.

                            NOTE: The amount field is an Int which implements the custom method
                            signatures required by gogoproto.
                  refund_address:
                    title: the refund address for unspent fees
                    type: string
                  relayers:
                    title: optional list of relayers permitted to receive fees
                    type: array
                    items:
                      type: string
    ibc.applications.fee.v1.QueryIncentivizedPacketsForChannelResponse:
      title: QueryIncentivizedPacketsResponse defines the response type for the incentivized
        packets RPC
      type: object
      properties:
        incentivized_packets:
          title: Map of all incentivized_packets
          type: array
          items:
            title: IdentifiedPacketFees contains a list of type PacketFee and associated
              PacketId
            type: object
            properties:
              packet_id:
                title: unique packet identifier comprised of the channel ID, port
                  ID and sequence
                type: object
                properties:
                  port_id:
                    title: channel port identifier
                    type: string
                  channel_id:
                    title: channel unique identifier
                    type: string
                  sequence:
                    title: packet sequence
                    type: string
                    format: uint64
              packet_fees:
                title: list of packet fees
                type: array
                items:
                  title: PacketFee contains ICS29 relayer fees, refund address and
                    optional list of permitted relayers
                  type: object
                  properties:
                    fee:
                      title: fee encapsulates the recv, ack and timeout fees associated
                        with an IBC packet
                      type: object
                      properties:
                        recv_fee:
                          title: the packet receive fee
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: |-
                              Coin defines a token with a denomination and an amount.

                              NOTE: The amount field is an Int which implements the custom method
                              signatures required by gogoproto.
                        ack_fee:
                          title: the packet acknowledgement fee
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: |-
                              Coin defines a token with a denomination and an amount.

                              NOTE: The amount field is an Int which implements the custom method
                              signatures required by gogoproto.
                        timeout_fee:
                          title: the packet timeout fee
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: |-
                              Coin defines a token with a denomination and an amount.

                              NOTE: The amount field is an Int which implements the custom method
                              signatures required by gogoproto.
                    refund_address:
                      title: the refund address for unspent fees
                      type: string
                    relayers:
                      title: optional list of relayers permitted to receive fees
                      type: array
                      items:
                        type: string
    ibc.applications.fee.v1.QueryIncentivizedPacketsResponse:
      title: QueryIncentivizedPacketsResponse defines the response type for the IncentivizedPackets
        rpc
      type: object
      properties:
        incentivized_packets:
          title: list of identified fees for incentivized packets
          type: array
          items:
            title: IdentifiedPacketFees contains a list of type PacketFee and associated
              PacketId
            type: object
            properties:
              packet_id:
                title: unique packet identifier comprised of the channel ID, port
                  ID and sequence
                type: object
                properties:
                  port_id:
                    title: channel port identifier
                    type: string
                  channel_id:
                    title: channel unique identifier
                    type: string
                  sequence:
                    title: packet sequence
                    type: string
                    format: uint64
              packet_fees:
                title: list of packet fees
                type: array
                items:
                  title: PacketFee contains ICS29 relayer fees, refund address and
                    optional list of permitted relayers
                  type: object
                  properties:
                    fee:
                      title: fee encapsulates the recv, ack and timeout fees associated
                        with an IBC packet
                      type: object
                      properties:
                        recv_fee:
                          title: the packet receive fee
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: |-
                              Coin defines a token with a denomination and an amount.

                              NOTE: The amount field is an Int which implements the custom method
                              signatures required by gogoproto.
                        ack_fee:
                          title: the packet acknowledgement fee
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: |-
                              Coin defines a token with a denomination and an amount.

                              NOTE: The amount field is an Int which implements the custom method
                              signatures required by gogoproto.
                        timeout_fee:
                          title: the packet timeout fee
                          type: array
                          items:
                            type: object
                            properties:
                              denom:
                                type: string
                              amount:
                                type: string
                            description: |-
                              Coin defines a token with a denomination and an amount.

                              NOTE: The amount field is an Int which implements the custom method
                              signatures required by gogoproto.
                    refund_address:
                      title: the refund address for unspent fees
                      type: string
                    relayers:
                      title: optional list of relayers permitted to receive fees
                      type: array
                      items:
                        type: string
    ibc.applications.fee.v1.QueryPayeeResponse:
      title: QueryPayeeResponse defines the response type for the Payee rpc
      type: object
      properties:
        payee_address:
          title: the payee address to which packet fees are paid out
          type: string
    ibc.applications.fee.v1.QueryTotalAckFeesResponse:
      title: QueryTotalAckFeesResponse defines the response type for the TotalAckFees
        rpc
      type: object
      properties:
        ack_fees:
          title: the total packet acknowledgement fees
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
    ibc.applications.fee.v1.QueryTotalRecvFeesResponse:
      title: QueryTotalRecvFeesResponse defines the response type for the TotalRecvFees
        rpc
      type: object
      properties:
        recv_fees:
          title: the total packet receive fees
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
    ibc.applications.fee.v1.QueryTotalTimeoutFeesResponse:
      title: QueryTotalTimeoutFeesResponse defines the response type for the TotalTimeoutFees
        rpc
      type: object
      properties:
        timeout_fees:
          title: the total packet timeout fees
          type: array
          items:
            type: object
            properties:
              denom:
                type: string
              amount:
                type: string
            description: |-
              Coin defines a token with a denomination and an amount.

              NOTE: The amount field is an Int which implements the custom method
              signatures required by gogoproto.
    ibc.core.channel.v1.PacketId:
      title: |-
        PacketId is an identifer for a unique Packet
        Source chains refer to packets by source port/channel
        Destination chains refer to packets by destination port/channel
      type: object
      properties:
        port_id:
          title: channel port identifier
          type: string
        channel_id:
          title: channel unique identifier
          type: string
        sequence:
          title: packet sequence
          type: string
          format: uint64
    ibc.core.client.v1.ConsensusStateWithHeight:
      type: object
      properties:
        height:
          title: consensus state height
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping
            RevisionNumber the same. However some consensus algorithms may choose to
            reset the height in certain conditions e.g. hard forks, state-machine
            breaking changes In these cases, the RevisionNumber is incremented so that
            height continues to be monitonically increasing even as the RevisionHeight
            gets reset
        consensus_state:
          title: consensus state
          type: object
          properties:
            type_url:
              type: string
              description: |-
                A URL/resource name that uniquely identifies the type of the serialized
                protocol buffer message. This string must contain at least
                one "/" character. The last segment of the URL's path must represent
                the fully qualified name of the type (as in
                `path/google.protobuf.Duration`). The name should be in a canonical form
                (e.g., leading "." is not accepted).

                In practice, teams usually precompile into the binary all types that they
                expect it to use in the context of Any. However, for URLs which use the
                scheme `http`, `https`, or no scheme, one can optionally set up a type
                server that maps type URLs to message definitions as follows:

                * If no scheme is provided, `https` is assumed.
                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the official
                protobuf release, and it is not used for type URLs beginning with
                type.googleapis.com.

                Schemes other than `http`, `https` (or the empty scheme) might be
                used with implementation specific semantics.
            value:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
          description: |-
            `Any` contains an arbitrary serialized protocol buffer message along with a
            URL that describes the type of the serialized message.

            Protobuf library provides support to pack/unpack Any values in the form
            of utility functions or additional generated methods of the Any type.

            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use
            'type.googleapis.com/full.type.name' as the type URL and the unpack
            methods only use the fully qualified type name after the last '/'
            in the type URL, for example "foo.bar.com/x/y.z" will yield type
            name "y.z".


            JSON
            ====
            The JSON representation of an `Any` value uses the regular
            representation of the deserialized, embedded message, with an
            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON
            representation, that representation will be embedded adding a field
            `value` which holds the custom JSON in addition to the `@type`
            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
      description: |-
        ConsensusStateWithHeight defines a consensus state with an additional height
        field.
    ibc.core.client.v1.Height:
      title: |-
        Height is a monotonically increasing data type
        that can be compared against another Height for the purposes of updating and
        freezing clients
      type: object
      properties:
        revision_number:
          title: the revision that the client is currently on
          type: string
          format: uint64
        revision_height:
          title: the height within the given revision
          type: string
          format: uint64
      description: |-
        Normally the RevisionHeight is incremented at each height while keeping
        RevisionNumber the same. However some consensus algorithms may choose to
        reset the height in certain conditions e.g. hard forks, state-machine
        breaking changes In these cases, the RevisionNumber is incremented so that
        height continues to be monitonically increasing even as the RevisionHeight
        gets reset
    ibc.core.client.v1.IdentifiedClientState:
      type: object
      properties:
        client_id:
          title: client identifier
          type: string
        client_state:
          title: client state
          type: object
          properties:
            type_url:
              type: string
              description: |-
                A URL/resource name that uniquely identifies the type of the serialized
                protocol buffer message. This string must contain at least
                one "/" character. The last segment of the URL's path must represent
                the fully qualified name of the type (as in
                `path/google.protobuf.Duration`). The name should be in a canonical form
                (e.g., leading "." is not accepted).

                In practice, teams usually precompile into the binary all types that they
                expect it to use in the context of Any. However, for URLs which use the
                scheme `http`, `https`, or no scheme, one can optionally set up a type
                server that maps type URLs to message definitions as follows:

                * If no scheme is provided, `https` is assumed.
                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the official
                protobuf release, and it is not used for type URLs beginning with
                type.googleapis.com.

                Schemes other than `http`, `https` (or the empty scheme) might be
                used with implementation specific semantics.
            value:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
          description: |-
            `Any` contains an arbitrary serialized protocol buffer message along with a
            URL that describes the type of the serialized message.

            Protobuf library provides support to pack/unpack Any values in the form
            of utility functions or additional generated methods of the Any type.

            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use
            'type.googleapis.com/full.type.name' as the type URL and the unpack
            methods only use the fully qualified type name after the last '/'
            in the type URL, for example "foo.bar.com/x/y.z" will yield type
            name "y.z".


            JSON
            ====
            The JSON representation of an `Any` value uses the regular
            representation of the deserialized, embedded message, with an
            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON
            representation, that representation will be embedded adding a field
            `value` which holds the custom JSON in addition to the `@type`
            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
      description: |-
        IdentifiedClientState defines a client state with an additional client
        identifier field.
    ibc.core.client.v1.Params:
      type: object
      properties:
        allowed_clients:
          type: array
          description: allowed_clients defines the list of allowed client state types.
          items:
            type: string
      description: Params defines the set of IBC light client parameters.
    ibc.core.client.v1.QueryClientParamsResponse:
      type: object
      properties:
        params:
          type: object
          properties:
            allowed_clients:
              type: array
              description: allowed_clients defines the list of allowed client state
                types.
              items:
                type: string
          description: params defines the parameters of the module.
      description: |-
        QueryClientParamsResponse is the response type for the Query/ClientParams RPC
        method.
    ibc.core.client.v1.QueryClientStateResponse:
      type: object
      properties:
        client_state:
          title: client state associated with the request identifier
          type: object
          properties:
            type_url:
              type: string
              description: |-
                A URL/resource name that uniquely identifies the type of the serialized
                protocol buffer message. This string must contain at least
                one "/" character. The last segment of the URL's path must represent
                the fully qualified name of the type (as in
                `path/google.protobuf.Duration`). The name should be in a canonical form
                (e.g., leading "." is not accepted).

                In practice, teams usually precompile into the binary all types that they
                expect it to use in the context of Any. However, for URLs which use the
                scheme `http`, `https`, or no scheme, one can optionally set up a type
                server that maps type URLs to message definitions as follows:

                * If no scheme is provided, `https` is assumed.
                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the official
                protobuf release, and it is not used for type URLs beginning with
                type.googleapis.com.

                Schemes other than `http`, `https` (or the empty scheme) might be
                used with implementation specific semantics.
            value:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
          description: |-
            `Any` contains an arbitrary serialized protocol buffer message along with a
            URL that describes the type of the serialized message.

            Protobuf library provides support to pack/unpack Any values in the form
            of utility functions or additional generated methods of the Any type.

            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use
            'type.googleapis.com/full.type.name' as the type URL and the unpack
            methods only use the fully qualified type name after the last '/'
            in the type URL, for example "foo.bar.com/x/y.z" will yield type
            name "y.z".


            JSON
            ====
            The JSON representation of an `Any` value uses the regular
            representation of the deserialized, embedded message, with an
            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON
            representation, that representation will be embedded adding a field
            `value` which holds the custom JSON in addition to the `@type`
            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: height at which the proof was retrieved
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping
            RevisionNumber the same. However some consensus algorithms may choose to
            reset the height in certain conditions e.g. hard forks, state-machine
            breaking changes In these cases, the RevisionNumber is incremented so that
            height continues to be monitonically increasing even as the RevisionHeight
            gets reset
      description: |-
        QueryClientStateResponse is the response type for the Query/ClientState RPC
        method. Besides the client state, it includes a proof and the height from
        which the proof was retrieved.
    ibc.core.client.v1.QueryClientStatesResponse:
      type: object
      properties:
        client_states:
          type: array
          description: list of stored ClientStates of the chain.
          items:
            type: object
            properties:
              client_id:
                title: client identifier
                type: string
              client_state:
                title: client state
                type: object
                properties:
                  type_url:
                    type: string
                    description: |-
                      A URL/resource name that uniquely identifies the type of the serialized
                      protocol buffer message. This string must contain at least
                      one "/" character. The last segment of the URL's path must represent
                      the fully qualified name of the type (as in
                      `path/google.protobuf.Duration`). The name should be in a canonical form
                      (e.g., leading "." is not accepted).

                      In practice, teams usually precompile into the binary all types that they
                      expect it to use in the context of Any. However, for URLs which use the
                      scheme `http`, `https`, or no scheme, one can optionally set up a type
                      server that maps type URLs to message definitions as follows:

                      * If no scheme is provided, `https` is assumed.
                      * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the official
                      protobuf release, and it is not used for type URLs beginning with
                      type.googleapis.com.

                      Schemes other than `http`, `https` (or the empty scheme) might be
                      used with implementation specific semantics.
                  value:
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    description: Must be a valid serialized protocol buffer of the
                      above specified type.
                    format: byte
                description: |-
                  `Any` contains an arbitrary serialized protocol buffer message along with a
                  URL that describes the type of the serialized message.

                  Protobuf library provides support to pack/unpack Any values in the form
                  of utility functions or additional generated methods of the Any type.

                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := ptypes.MarshalAny(foo)
                       ...
                       foo := &pb.Foo{}
                       if err := ptypes.UnmarshalAny(any, foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default use
                  'type.googleapis.com/full.type.name' as the type URL and the unpack
                  methods only use the fully qualified type name after the last '/'
                  in the type URL, for example "foo.bar.com/x/y.z" will yield type
                  name "y.z".


                  JSON
                  ====
                  The JSON representation of an `Any` value uses the regular
                  representation of the deserialized, embedded message, with an
                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom JSON
                  representation, that representation will be embedded adding a field
                  `value` which holds the custom JSON in addition to the `@type`
                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
            description: |-
              IdentifiedClientState defines a client state with an additional client
              identifier field.
        pagination:
          title: pagination response
          type: object
          properties:
            next_key:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
      description: |-
        QueryClientStatesResponse is the response type for the Query/ClientStates RPC
        method.
    ibc.core.client.v1.QueryClientStatusResponse:
      type: object
      properties:
        status:
          type: string
      description: |-
        QueryClientStatusResponse is the response type for the Query/ClientStatus RPC
        method. It returns the current status of the IBC client.
    ibc.core.client.v1.QueryConsensusStateHeightsResponse:
      title: |-
        QueryConsensusStateHeightsResponse is the response type for the
        Query/ConsensusStateHeights RPC method
      type: object
      properties:
        consensus_state_heights:
          title: consensus state heights
          type: array
          items:
            title: |-
              Height is a monotonically increasing data type
              that can be compared against another Height for the purposes of updating and
              freezing clients
            type: object
            properties:
              revision_number:
                title: the revision that the client is currently on
                type: string
                format: uint64
              revision_height:
                title: the height within the given revision
                type: string
                format: uint64
            description: |-
              Normally the RevisionHeight is incremented at each height while keeping
              RevisionNumber the same. However some consensus algorithms may choose to
              reset the height in certain conditions e.g. hard forks, state-machine
              breaking changes In these cases, the RevisionNumber is incremented so that
              height continues to be monitonically increasing even as the RevisionHeight
              gets reset
        pagination:
          title: pagination response
          type: object
          properties:
            next_key:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
    ibc.core.client.v1.QueryConsensusStateResponse:
      title: |-
        QueryConsensusStateResponse is the response type for the Query/ConsensusState
        RPC method
      type: object
      properties:
        consensus_state:
          title: consensus state associated with the client identifier at the given
            height
          type: object
          properties:
            type_url:
              type: string
              description: |-
                A URL/resource name that uniquely identifies the type of the serialized
                protocol buffer message. This string must contain at least
                one "/" character. The last segment of the URL's path must represent
                the fully qualified name of the type (as in
                `path/google.protobuf.Duration`). The name should be in a canonical form
                (e.g., leading "." is not accepted).

                In practice, teams usually precompile into the binary all types that they
                expect it to use in the context of Any. However, for URLs which use the
                scheme `http`, `https`, or no scheme, one can optionally set up a type
                server that maps type URLs to message definitions as follows:

                * If no scheme is provided, `https` is assumed.
                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the official
                protobuf release, and it is not used for type URLs beginning with
                type.googleapis.com.

                Schemes other than `http`, `https` (or the empty scheme) might be
                used with implementation specific semantics.
            value:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
          description: |-
            `Any` contains an arbitrary serialized protocol buffer message along with a
            URL that describes the type of the serialized message.

            Protobuf library provides support to pack/unpack Any values in the form
            of utility functions or additional generated methods of the Any type.

            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use
            'type.googleapis.com/full.type.name' as the type URL and the unpack
            methods only use the fully qualified type name after the last '/'
            in the type URL, for example "foo.bar.com/x/y.z" will yield type
            name "y.z".


            JSON
            ====
            The JSON representation of an `Any` value uses the regular
            representation of the deserialized, embedded message, with an
            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON
            representation, that representation will be embedded adding a field
            `value` which holds the custom JSON in addition to the `@type`
            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: |-
            Height is a monotonically increasing data type
            that can be compared against another Height for the purposes of updating and
            freezing clients
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping
            RevisionNumber the same. However some consensus algorithms may choose to
            reset the height in certain conditions e.g. hard forks, state-machine
            breaking changes In these cases, the RevisionNumber is incremented so that
            height continues to be monitonically increasing even as the RevisionHeight
            gets reset
    ibc.core.client.v1.QueryConsensusStatesResponse:
      title: |-
        QueryConsensusStatesResponse is the response type for the
        Query/ConsensusStates RPC method
      type: object
      properties:
        consensus_states:
          title: consensus states associated with the identifier
          type: array
          items:
            type: object
            properties:
              height:
                title: consensus state height
                type: object
                properties:
                  revision_number:
                    title: the revision that the client is currently on
                    type: string
                    format: uint64
                  revision_height:
                    title: the height within the given revision
                    type: string
                    format: uint64
                description: |-
                  Normally the RevisionHeight is incremented at each height while keeping
                  RevisionNumber the same. However some consensus algorithms may choose to
                  reset the height in certain conditions e.g. hard forks, state-machine
                  breaking changes In these cases, the RevisionNumber is incremented so that
                  height continues to be monitonically increasing even as the RevisionHeight
                  gets reset
              consensus_state:
                title: consensus state
                type: object
                properties:
                  type_url:
                    type: string
                    description: |-
                      A URL/resource name that uniquely identifies the type of the serialized
                      protocol buffer message. This string must contain at least
                      one "/" character. The last segment of the URL's path must represent
                      the fully qualified name of the type (as in
                      `path/google.protobuf.Duration`). The name should be in a canonical form
                      (e.g., leading "." is not accepted).

                      In practice, teams usually precompile into the binary all types that they
                      expect it to use in the context of Any. However, for URLs which use the
                      scheme `http`, `https`, or no scheme, one can optionally set up a type
                      server that maps type URLs to message definitions as follows:

                      * If no scheme is provided, `https` is assumed.
                      * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                        value in binary format, or produce an error.
                      * Applications are allowed to cache lookup results based on the
                        URL, or have them precompiled into a binary to avoid any
                        lookup. Therefore, binary compatibility needs to be preserved
                        on changes to types. (Use versioned type names to manage
                        breaking changes.)

                      Note: this functionality is not currently available in the official
                      protobuf release, and it is not used for type URLs beginning with
                      type.googleapis.com.

                      Schemes other than `http`, `https` (or the empty scheme) might be
                      used with implementation specific semantics.
                  value:
                    pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                    type: string
                    description: Must be a valid serialized protocol buffer of the
                      above specified type.
                    format: byte
                description: |-
                  `Any` contains an arbitrary serialized protocol buffer message along with a
                  URL that describes the type of the serialized message.

                  Protobuf library provides support to pack/unpack Any values in the form
                  of utility functions or additional generated methods of the Any type.

                  Example 1: Pack and unpack a message in C++.

                      Foo foo = ...;
                      Any any;
                      any.PackFrom(foo);
                      ...
                      if (any.UnpackTo(&foo)) {
                        ...
                      }

                  Example 2: Pack and unpack a message in Java.

                      Foo foo = ...;
                      Any any = Any.pack(foo);
                      ...
                      if (any.is(Foo.class)) {
                        foo = any.unpack(Foo.class);
                      }

                   Example 3: Pack and unpack a message in Python.

                      foo = Foo(...)
                      any = Any()
                      any.Pack(foo)
                      ...
                      if any.Is(Foo.DESCRIPTOR):
                        any.Unpack(foo)
                        ...

                   Example 4: Pack and unpack a message in Go

                       foo := &pb.Foo{...}
                       any, err := ptypes.MarshalAny(foo)
                       ...
                       foo := &pb.Foo{}
                       if err := ptypes.UnmarshalAny(any, foo); err != nil {
                         ...
                       }

                  The pack methods provided by protobuf library will by default use
                  'type.googleapis.com/full.type.name' as the type URL and the unpack
                  methods only use the fully qualified type name after the last '/'
                  in the type URL, for example "foo.bar.com/x/y.z" will yield type
                  name "y.z".


                  JSON
                  ====
                  The JSON representation of an `Any` value uses the regular
                  representation of the deserialized, embedded message, with an
                  additional field `@type` which contains the type URL. Example:

                      package google.profile;
                      message Person {
                        string first_name = 1;
                        string last_name = 2;
                      }

                      {
                        "@type": "type.googleapis.com/google.profile.Person",
                        "firstName": <string>,
                        "lastName": <string>
                      }

                  If the embedded message type is well-known and has a custom JSON
                  representation, that representation will be embedded adding a field
                  `value` which holds the custom JSON in addition to the `@type`
                  field. Example (for message [google.protobuf.Duration][]):

                      {
                        "@type": "type.googleapis.com/google.protobuf.Duration",
                        "value": "1.212s"
                      }
            description: |-
              ConsensusStateWithHeight defines a consensus state with an additional height
              field.
        pagination:
          title: pagination response
          type: object
          properties:
            next_key:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
    ibc.core.client.v1.QueryUpgradedClientStateResponse:
      type: object
      properties:
        upgraded_client_state:
          title: client state associated with the request identifier
          type: object
          properties:
            type_url:
              type: string
              description: |-
                A URL/resource name that uniquely identifies the type of the serialized
                protocol buffer message. This string must contain at least
                one "/" character. The last segment of the URL's path must represent
                the fully qualified name of the type (as in
                `path/google.protobuf.Duration`). The name should be in a canonical form
                (e.g., leading "." is not accepted).

                In practice, teams usually precompile into the binary all types that they
                expect it to use in the context of Any. However, for URLs which use the
                scheme `http`, `https`, or no scheme, one can optionally set up a type
                server that maps type URLs to message definitions as follows:

                * If no scheme is provided, `https` is assumed.
                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the official
                protobuf release, and it is not used for type URLs beginning with
                type.googleapis.com.

                Schemes other than `http`, `https` (or the empty scheme) might be
                used with implementation specific semantics.
            value:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
          description: |-
            `Any` contains an arbitrary serialized protocol buffer message along with a
            URL that describes the type of the serialized message.

            Protobuf library provides support to pack/unpack Any values in the form
            of utility functions or additional generated methods of the Any type.

            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use
            'type.googleapis.com/full.type.name' as the type URL and the unpack
            methods only use the fully qualified type name after the last '/'
            in the type URL, for example "foo.bar.com/x/y.z" will yield type
            name "y.z".


            JSON
            ====
            The JSON representation of an `Any` value uses the regular
            representation of the deserialized, embedded message, with an
            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON
            representation, that representation will be embedded adding a field
            `value` which holds the custom JSON in addition to the `@type`
            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
      description: |-
        QueryUpgradedClientStateResponse is the response type for the
        Query/UpgradedClientState RPC method.
    ibc.core.client.v1.QueryUpgradedConsensusStateResponse:
      type: object
      properties:
        upgraded_consensus_state:
          title: Consensus state associated with the request identifier
          type: object
          properties:
            type_url:
              type: string
              description: |-
                A URL/resource name that uniquely identifies the type of the serialized
                protocol buffer message. This string must contain at least
                one "/" character. The last segment of the URL's path must represent
                the fully qualified name of the type (as in
                `path/google.protobuf.Duration`). The name should be in a canonical form
                (e.g., leading "." is not accepted).

                In practice, teams usually precompile into the binary all types that they
                expect it to use in the context of Any. However, for URLs which use the
                scheme `http`, `https`, or no scheme, one can optionally set up a type
                server that maps type URLs to message definitions as follows:

                * If no scheme is provided, `https` is assumed.
                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the official
                protobuf release, and it is not used for type URLs beginning with
                type.googleapis.com.

                Schemes other than `http`, `https` (or the empty scheme) might be
                used with implementation specific semantics.
            value:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
          description: |-
            `Any` contains an arbitrary serialized protocol buffer message along with a
            URL that describes the type of the serialized message.

            Protobuf library provides support to pack/unpack Any values in the form
            of utility functions or additional generated methods of the Any type.

            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use
            'type.googleapis.com/full.type.name' as the type URL and the unpack
            methods only use the fully qualified type name after the last '/'
            in the type URL, for example "foo.bar.com/x/y.z" will yield type
            name "y.z".


            JSON
            ====
            The JSON representation of an `Any` value uses the regular
            representation of the deserialized, embedded message, with an
            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON
            representation, that representation will be embedded adding a field
            `value` which holds the custom JSON in addition to the `@type`
            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
      description: |-
        QueryUpgradedConsensusStateResponse is the response type for the
        Query/UpgradedConsensusState RPC method.
    ibc.core.commitment.v1.MerklePrefix:
      title: |-
        MerklePrefix is merkle path prefixed to the key.
        The constructed key from the Path and the key will be append(Path.KeyPath,
        append(Path.KeyPrefix, key...))
      type: object
      properties:
        key_prefix:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
    ibc.core.connection.v1.ConnectionEnd:
      type: object
      properties:
        client_id:
          type: string
          description: client associated with this connection.
        versions:
          type: array
          description: |-
            IBC version which can be utilised to determine encodings or protocols for
            channels or packets utilising this connection.
          items:
            type: object
            properties:
              identifier:
                title: unique version identifier
                type: string
              features:
                title: list of features compatible with the specified identifier
                type: array
                items:
                  type: string
            description: |-
              Version defines the versioning scheme used to negotiate the IBC verison in
              the connection handshake.
        state:
          type: string
          description: current state of the connection end.
          default: STATE_UNINITIALIZED_UNSPECIFIED
          enum:
          - STATE_UNINITIALIZED_UNSPECIFIED
          - STATE_INIT
          - STATE_TRYOPEN
          - STATE_OPEN
        counterparty:
          type: object
          properties:
            client_id:
              type: string
              description: |-
                identifies the client on the counterparty chain associated with a given
                connection.
            connection_id:
              type: string
              description: |-
                identifies the connection end on the counterparty chain associated with a
                given connection.
            prefix:
              title: |-
                MerklePrefix is merkle path prefixed to the key.
                The constructed key from the Path and the key will be append(Path.KeyPath,
                append(Path.KeyPrefix, key...))
              type: object
              properties:
                key_prefix:
                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                  type: string
                  format: byte
              description: commitment merkle prefix of the counterparty chain.
          description: counterparty chain associated with this connection.
        delay_period:
          type: string
          description: |-
            delay period that must pass before a consensus state can be used for
            packet-verification NOTE: delay period logic is only implemented by some
            clients.
          format: uint64
      description: |-
        ConnectionEnd defines a stateful object on a chain connected to another
        separate one.
        NOTE: there must only be 2 defined ConnectionEnds to establish
        a connection between two chains.
    ibc.core.connection.v1.Counterparty:
      type: object
      properties:
        client_id:
          type: string
          description: |-
            identifies the client on the counterparty chain associated with a given
            connection.
        connection_id:
          type: string
          description: |-
            identifies the connection end on the counterparty chain associated with a
            given connection.
        prefix:
          title: |-
            MerklePrefix is merkle path prefixed to the key.
            The constructed key from the Path and the key will be append(Path.KeyPath,
            append(Path.KeyPrefix, key...))
          type: object
          properties:
            key_prefix:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              format: byte
          description: commitment merkle prefix of the counterparty chain.
      description: Counterparty defines the counterparty chain associated with a connection
        end.
    ibc.core.connection.v1.IdentifiedConnection:
      type: object
      properties:
        id:
          type: string
          description: connection identifier.
        client_id:
          type: string
          description: client associated with this connection.
        versions:
          title: |-
            IBC version which can be utilised to determine encodings or protocols for
            channels or packets utilising this connection
          type: array
          items:
            type: object
            properties:
              identifier:
                title: unique version identifier
                type: string
              features:
                title: list of features compatible with the specified identifier
                type: array
                items:
                  type: string
            description: |-
              Version defines the versioning scheme used to negotiate the IBC verison in
              the connection handshake.
        state:
          type: string
          description: current state of the connection end.
          default: STATE_UNINITIALIZED_UNSPECIFIED
          enum:
          - STATE_UNINITIALIZED_UNSPECIFIED
          - STATE_INIT
          - STATE_TRYOPEN
          - STATE_OPEN
        counterparty:
          type: object
          properties:
            client_id:
              type: string
              description: |-
                identifies the client on the counterparty chain associated with a given
                connection.
            connection_id:
              type: string
              description: |-
                identifies the connection end on the counterparty chain associated with a
                given connection.
            prefix:
              title: |-
                MerklePrefix is merkle path prefixed to the key.
                The constructed key from the Path and the key will be append(Path.KeyPath,
                append(Path.KeyPrefix, key...))
              type: object
              properties:
                key_prefix:
                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                  type: string
                  format: byte
              description: commitment merkle prefix of the counterparty chain.
          description: counterparty chain associated with this connection.
        delay_period:
          type: string
          description: delay period associated with this connection.
          format: uint64
      description: |-
        IdentifiedConnection defines a connection with additional connection
        identifier field.
    ibc.core.connection.v1.QueryClientConnectionsResponse:
      title: |-
        QueryClientConnectionsResponse is the response type for the
        Query/ClientConnections RPC method
      type: object
      properties:
        connection_paths:
          type: array
          description: slice of all the connection paths associated with a client.
          items:
            type: string
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: height at which the proof was generated
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping
            RevisionNumber the same. However some consensus algorithms may choose to
            reset the height in certain conditions e.g. hard forks, state-machine
            breaking changes In these cases, the RevisionNumber is incremented so that
            height continues to be monitonically increasing even as the RevisionHeight
            gets reset
    ibc.core.connection.v1.QueryConnectionClientStateResponse:
      title: |-
        QueryConnectionClientStateResponse is the response type for the
        Query/ConnectionClientState RPC method
      type: object
      properties:
        identified_client_state:
          title: client state associated with the channel
          type: object
          properties:
            client_id:
              title: client identifier
              type: string
            client_state:
              title: client state
              type: object
              properties:
                type_url:
                  type: string
                  description: |-
                    A URL/resource name that uniquely identifies the type of the serialized
                    protocol buffer message. This string must contain at least
                    one "/" character. The last segment of the URL's path must represent
                    the fully qualified name of the type (as in
                    `path/google.protobuf.Duration`). The name should be in a canonical form
                    (e.g., leading "." is not accepted).

                    In practice, teams usually precompile into the binary all types that they
                    expect it to use in the context of Any. However, for URLs which use the
                    scheme `http`, `https`, or no scheme, one can optionally set up a type
                    server that maps type URLs to message definitions as follows:

                    * If no scheme is provided, `https` is assumed.
                    * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the official
                    protobuf release, and it is not used for type URLs beginning with
                    type.googleapis.com.

                    Schemes other than `http`, `https` (or the empty scheme) might be
                    used with implementation specific semantics.
                value:
                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                  type: string
                  description: Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
              description: |-
                `Any` contains an arbitrary serialized protocol buffer message along with a
                URL that describes the type of the serialized message.

                Protobuf library provides support to pack/unpack Any values in the form
                of utility functions or additional generated methods of the Any type.

                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default use
                'type.googleapis.com/full.type.name' as the type URL and the unpack
                methods only use the fully qualified type name after the last '/'
                in the type URL, for example "foo.bar.com/x/y.z" will yield type
                name "y.z".


                JSON
                ====
                The JSON representation of an `Any` value uses the regular
                representation of the deserialized, embedded message, with an
                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON
                representation, that representation will be embedded adding a field
                `value` which holds the custom JSON in addition to the `@type`
                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
          description: |-
            IdentifiedClientState defines a client state with an additional client
            identifier field.
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: height at which the proof was retrieved
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping
            RevisionNumber the same. However some consensus algorithms may choose to
            reset the height in certain conditions e.g. hard forks, state-machine
            breaking changes In these cases, the RevisionNumber is incremented so that
            height continues to be monitonically increasing even as the RevisionHeight
            gets reset
    ibc.core.connection.v1.QueryConnectionConsensusStateResponse:
      title: |-
        QueryConnectionConsensusStateResponse is the response type for the
        Query/ConnectionConsensusState RPC method
      type: object
      properties:
        consensus_state:
          title: consensus state associated with the channel
          type: object
          properties:
            type_url:
              type: string
              description: |-
                A URL/resource name that uniquely identifies the type of the serialized
                protocol buffer message. This string must contain at least
                one "/" character. The last segment of the URL's path must represent
                the fully qualified name of the type (as in
                `path/google.protobuf.Duration`). The name should be in a canonical form
                (e.g., leading "." is not accepted).

                In practice, teams usually precompile into the binary all types that they
                expect it to use in the context of Any. However, for URLs which use the
                scheme `http`, `https`, or no scheme, one can optionally set up a type
                server that maps type URLs to message definitions as follows:

                * If no scheme is provided, `https` is assumed.
                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the official
                protobuf release, and it is not used for type URLs beginning with
                type.googleapis.com.

                Schemes other than `http`, `https` (or the empty scheme) might be
                used with implementation specific semantics.
            value:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
          description: |-
            `Any` contains an arbitrary serialized protocol buffer message along with a
            URL that describes the type of the serialized message.

            Protobuf library provides support to pack/unpack Any values in the form
            of utility functions or additional generated methods of the Any type.

            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use
            'type.googleapis.com/full.type.name' as the type URL and the unpack
            methods only use the fully qualified type name after the last '/'
            in the type URL, for example "foo.bar.com/x/y.z" will yield type
            name "y.z".


            JSON
            ====
            The JSON representation of an `Any` value uses the regular
            representation of the deserialized, embedded message, with an
            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON
            representation, that representation will be embedded adding a field
            `value` which holds the custom JSON in addition to the `@type`
            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        client_id:
          title: client ID associated with the consensus state
          type: string
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: height at which the proof was retrieved
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping
            RevisionNumber the same. However some consensus algorithms may choose to
            reset the height in certain conditions e.g. hard forks, state-machine
            breaking changes In these cases, the RevisionNumber is incremented so that
            height continues to be monitonically increasing even as the RevisionHeight
            gets reset
    ibc.core.connection.v1.QueryConnectionResponse:
      type: object
      properties:
        connection:
          title: connection associated with the request identifier
          type: object
          properties:
            client_id:
              type: string
              description: client associated with this connection.
            versions:
              type: array
              description: |-
                IBC version which can be utilised to determine encodings or protocols for
                channels or packets utilising this connection.
              items:
                type: object
                properties:
                  identifier:
                    title: unique version identifier
                    type: string
                  features:
                    title: list of features compatible with the specified identifier
                    type: array
                    items:
                      type: string
                description: |-
                  Version defines the versioning scheme used to negotiate the IBC verison in
                  the connection handshake.
            state:
              type: string
              description: current state of the connection end.
              default: STATE_UNINITIALIZED_UNSPECIFIED
              enum:
              - STATE_UNINITIALIZED_UNSPECIFIED
              - STATE_INIT
              - STATE_TRYOPEN
              - STATE_OPEN
            counterparty:
              type: object
              properties:
                client_id:
                  type: string
                  description: |-
                    identifies the client on the counterparty chain associated with a given
                    connection.
                connection_id:
                  type: string
                  description: |-
                    identifies the connection end on the counterparty chain associated with a
                    given connection.
                prefix:
                  title: |-
                    MerklePrefix is merkle path prefixed to the key.
                    The constructed key from the Path and the key will be append(Path.KeyPath,
                    append(Path.KeyPrefix, key...))
                  type: object
                  properties:
                    key_prefix:
                      pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                      type: string
                      format: byte
                  description: commitment merkle prefix of the counterparty chain.
              description: counterparty chain associated with this connection.
            delay_period:
              type: string
              description: |-
                delay period that must pass before a consensus state can be used for
                packet-verification NOTE: delay period logic is only implemented by some
                clients.
              format: uint64
          description: |-
            ConnectionEnd defines a stateful object on a chain connected to another
            separate one.
            NOTE: there must only be 2 defined ConnectionEnds to establish
            a connection between two chains.
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: height at which the proof was retrieved
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping
            RevisionNumber the same. However some consensus algorithms may choose to
            reset the height in certain conditions e.g. hard forks, state-machine
            breaking changes In these cases, the RevisionNumber is incremented so that
            height continues to be monitonically increasing even as the RevisionHeight
            gets reset
      description: |-
        QueryConnectionResponse is the response type for the Query/Connection RPC
        method. Besides the connection end, it includes a proof and the height from
        which the proof was retrieved.
    ibc.core.connection.v1.QueryConnectionsResponse:
      type: object
      properties:
        connections:
          type: array
          description: list of stored connections of the chain.
          items:
            type: object
            properties:
              id:
                type: string
                description: connection identifier.
              client_id:
                type: string
                description: client associated with this connection.
              versions:
                title: |-
                  IBC version which can be utilised to determine encodings or protocols for
                  channels or packets utilising this connection
                type: array
                items:
                  type: object
                  properties:
                    identifier:
                      title: unique version identifier
                      type: string
                    features:
                      title: list of features compatible with the specified identifier
                      type: array
                      items:
                        type: string
                  description: |-
                    Version defines the versioning scheme used to negotiate the IBC verison in
                    the connection handshake.
              state:
                type: string
                description: current state of the connection end.
                default: STATE_UNINITIALIZED_UNSPECIFIED
                enum:
                - STATE_UNINITIALIZED_UNSPECIFIED
                - STATE_INIT
                - STATE_TRYOPEN
                - STATE_OPEN
              counterparty:
                type: object
                properties:
                  client_id:
                    type: string
                    description: |-
                      identifies the client on the counterparty chain associated with a given
                      connection.
                  connection_id:
                    type: string
                    description: |-
                      identifies the connection end on the counterparty chain associated with a
                      given connection.
                  prefix:
                    title: |-
                      MerklePrefix is merkle path prefixed to the key.
                      The constructed key from the Path and the key will be append(Path.KeyPath,
                      append(Path.KeyPrefix, key...))
                    type: object
                    properties:
                      key_prefix:
                        pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                        type: string
                        format: byte
                    description: commitment merkle prefix of the counterparty chain.
                description: counterparty chain associated with this connection.
              delay_period:
                type: string
                description: delay period associated with this connection.
                format: uint64
            description: |-
              IdentifiedConnection defines a connection with additional connection
              identifier field.
        pagination:
          title: pagination response
          type: object
          properties:
            next_key:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
        height:
          title: query block height
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping
            RevisionNumber the same. However some consensus algorithms may choose to
            reset the height in certain conditions e.g. hard forks, state-machine
            breaking changes In these cases, the RevisionNumber is incremented so that
            height continues to be monitonically increasing even as the RevisionHeight
            gets reset
      description: |-
        QueryConnectionsResponse is the response type for the Query/Connections RPC
        method.
    ibc.core.connection.v1.State:
      type: string
      description: |-
        State defines if a connection is in one of the following states:
        INIT, TRYOPEN, OPEN or UNINITIALIZED.

         - STATE_UNINITIALIZED_UNSPECIFIED: Default State
         - STATE_INIT: A connection end has just started the opening handshake.
         - STATE_TRYOPEN: A connection end has acknowledged the handshake step on the counterparty
        chain.
         - STATE_OPEN: A connection end has completed the handshake.
      default: STATE_UNINITIALIZED_UNSPECIFIED
      enum:
      - STATE_UNINITIALIZED_UNSPECIFIED
      - STATE_INIT
      - STATE_TRYOPEN
      - STATE_OPEN
    ibc.core.connection.v1.Version:
      type: object
      properties:
        identifier:
          title: unique version identifier
          type: string
        features:
          title: list of features compatible with the specified identifier
          type: array
          items:
            type: string
      description: |-
        Version defines the versioning scheme used to negotiate the IBC verison in
        the connection handshake.
    ibc.core.channel.v1.Channel:
      type: object
      properties:
        state:
          title: current state of the channel end
          type: string
          description: |-
            State defines if a channel is in one of the following states:
            CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

             - STATE_UNINITIALIZED_UNSPECIFIED: Default State
             - STATE_INIT: A channel has just started the opening handshake.
             - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
             - STATE_OPEN: A channel has completed the handshake. Open channels are
            ready to send and receive packets.
             - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
            packets.
          default: STATE_UNINITIALIZED_UNSPECIFIED
          enum:
          - STATE_UNINITIALIZED_UNSPECIFIED
          - STATE_INIT
          - STATE_TRYOPEN
          - STATE_OPEN
          - STATE_CLOSED
        ordering:
          title: whether the channel is ordered or unordered
          type: string
          description: |-
            - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
             - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
            which they were sent.
             - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
          default: ORDER_NONE_UNSPECIFIED
          enum:
          - ORDER_NONE_UNSPECIFIED
          - ORDER_UNORDERED
          - ORDER_ORDERED
        counterparty:
          title: counterparty channel end
          type: object
          properties:
            port_id:
              type: string
              description: port on the counterparty chain which owns the other end
                of the channel.
            channel_id:
              title: channel end on the counterparty chain
              type: string
        connection_hops:
          title: |-
            list of connection identifiers, in order, along which packets sent on
            this channel will travel
          type: array
          items:
            type: string
        version:
          title: opaque channel version, which is agreed upon during the handshake
          type: string
      description: |-
        Channel defines pipeline for exactly-once packet delivery between specific
        modules on separate blockchains, which has at least one end capable of
        sending packets and one end capable of receiving packets.
    ibc.core.channel.v1.Counterparty:
      title: Counterparty defines a channel end counterparty
      type: object
      properties:
        port_id:
          type: string
          description: port on the counterparty chain which owns the other end of
            the channel.
        channel_id:
          title: channel end on the counterparty chain
          type: string
    ibc.core.channel.v1.IdentifiedChannel:
      type: object
      properties:
        state:
          title: current state of the channel end
          type: string
          description: |-
            State defines if a channel is in one of the following states:
            CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

             - STATE_UNINITIALIZED_UNSPECIFIED: Default State
             - STATE_INIT: A channel has just started the opening handshake.
             - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
             - STATE_OPEN: A channel has completed the handshake. Open channels are
            ready to send and receive packets.
             - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
            packets.
          default: STATE_UNINITIALIZED_UNSPECIFIED
          enum:
          - STATE_UNINITIALIZED_UNSPECIFIED
          - STATE_INIT
          - STATE_TRYOPEN
          - STATE_OPEN
          - STATE_CLOSED
        ordering:
          title: whether the channel is ordered or unordered
          type: string
          description: |-
            - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
             - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
            which they were sent.
             - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
          default: ORDER_NONE_UNSPECIFIED
          enum:
          - ORDER_NONE_UNSPECIFIED
          - ORDER_UNORDERED
          - ORDER_ORDERED
        counterparty:
          title: counterparty channel end
          type: object
          properties:
            port_id:
              type: string
              description: port on the counterparty chain which owns the other end
                of the channel.
            channel_id:
              title: channel end on the counterparty chain
              type: string
        connection_hops:
          title: |-
            list of connection identifiers, in order, along which packets sent on
            this channel will travel
          type: array
          items:
            type: string
        version:
          title: opaque channel version, which is agreed upon during the handshake
          type: string
        port_id:
          title: port identifier
          type: string
        channel_id:
          title: channel identifier
          type: string
      description: |-
        IdentifiedChannel defines a channel with additional port and channel
        identifier fields.
    ibc.core.channel.v1.Order:
      title: Order defines if a channel is ORDERED or UNORDERED
      type: string
      description: |-
        - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
         - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
        which they were sent.
         - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
      default: ORDER_NONE_UNSPECIFIED
      enum:
      - ORDER_NONE_UNSPECIFIED
      - ORDER_UNORDERED
      - ORDER_ORDERED
    ibc.core.channel.v1.PacketState:
      type: object
      properties:
        port_id:
          type: string
          description: channel port identifier.
        channel_id:
          type: string
          description: channel unique identifier.
        sequence:
          type: string
          description: packet sequence.
          format: uint64
        data:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: embedded data that represents packet state.
          format: byte
      description: |-
        PacketState defines the generic type necessary to retrieve and store
        packet commitments, acknowledgements, and receipts.
        Caller is responsible for knowing the context necessary to interpret this
        state as a commitment, acknowledgement, or a receipt.
    ibc.core.channel.v1.QueryChannelClientStateResponse:
      title: |-
        QueryChannelClientStateResponse is the Response type for the
        Query/QueryChannelClientState RPC method
      type: object
      properties:
        identified_client_state:
          title: client state associated with the channel
          type: object
          properties:
            client_id:
              title: client identifier
              type: string
            client_state:
              title: client state
              type: object
              properties:
                type_url:
                  type: string
                  description: |-
                    A URL/resource name that uniquely identifies the type of the serialized
                    protocol buffer message. This string must contain at least
                    one "/" character. The last segment of the URL's path must represent
                    the fully qualified name of the type (as in
                    `path/google.protobuf.Duration`). The name should be in a canonical form
                    (e.g., leading "." is not accepted).

                    In practice, teams usually precompile into the binary all types that they
                    expect it to use in the context of Any. However, for URLs which use the
                    scheme `http`, `https`, or no scheme, one can optionally set up a type
                    server that maps type URLs to message definitions as follows:

                    * If no scheme is provided, `https` is assumed.
                    * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                      value in binary format, or produce an error.
                    * Applications are allowed to cache lookup results based on the
                      URL, or have them precompiled into a binary to avoid any
                      lookup. Therefore, binary compatibility needs to be preserved
                      on changes to types. (Use versioned type names to manage
                      breaking changes.)

                    Note: this functionality is not currently available in the official
                    protobuf release, and it is not used for type URLs beginning with
                    type.googleapis.com.

                    Schemes other than `http`, `https` (or the empty scheme) might be
                    used with implementation specific semantics.
                value:
                  pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                  type: string
                  description: Must be a valid serialized protocol buffer of the above
                    specified type.
                  format: byte
              description: |-
                `Any` contains an arbitrary serialized protocol buffer message along with a
                URL that describes the type of the serialized message.

                Protobuf library provides support to pack/unpack Any values in the form
                of utility functions or additional generated methods of the Any type.

                Example 1: Pack and unpack a message in C++.

                    Foo foo = ...;
                    Any any;
                    any.PackFrom(foo);
                    ...
                    if (any.UnpackTo(&foo)) {
                      ...
                    }

                Example 2: Pack and unpack a message in Java.

                    Foo foo = ...;
                    Any any = Any.pack(foo);
                    ...
                    if (any.is(Foo.class)) {
                      foo = any.unpack(Foo.class);
                    }

                 Example 3: Pack and unpack a message in Python.

                    foo = Foo(...)
                    any = Any()
                    any.Pack(foo)
                    ...
                    if any.Is(Foo.DESCRIPTOR):
                      any.Unpack(foo)
                      ...

                 Example 4: Pack and unpack a message in Go

                     foo := &pb.Foo{...}
                     any, err := ptypes.MarshalAny(foo)
                     ...
                     foo := &pb.Foo{}
                     if err := ptypes.UnmarshalAny(any, foo); err != nil {
                       ...
                     }

                The pack methods provided by protobuf library will by default use
                'type.googleapis.com/full.type.name' as the type URL and the unpack
                methods only use the fully qualified type name after the last '/'
                in the type URL, for example "foo.bar.com/x/y.z" will yield type
                name "y.z".


                JSON
                ====
                The JSON representation of an `Any` value uses the regular
                representation of the deserialized, embedded message, with an
                additional field `@type` which contains the type URL. Example:

                    package google.profile;
                    message Person {
                      string first_name = 1;
                      string last_name = 2;
                    }

                    {
                      "@type": "type.googleapis.com/google.profile.Person",
                      "firstName": <string>,
                      "lastName": <string>
                    }

                If the embedded message type is well-known and has a custom JSON
                representation, that representation will be embedded adding a field
                `value` which holds the custom JSON in addition to the `@type`
                field. Example (for message [google.protobuf.Duration][]):

                    {
                      "@type": "type.googleapis.com/google.protobuf.Duration",
                      "value": "1.212s"
                    }
          description: |-
            IdentifiedClientState defines a client state with an additional client
            identifier field.
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: height at which the proof was retrieved
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping
            RevisionNumber the same. However some consensus algorithms may choose to
            reset the height in certain conditions e.g. hard forks, state-machine
            breaking changes In these cases, the RevisionNumber is incremented so that
            height continues to be monitonically increasing even as the RevisionHeight
            gets reset
    ibc.core.channel.v1.QueryChannelConsensusStateResponse:
      title: |-
        QueryChannelClientStateResponse is the Response type for the
        Query/QueryChannelClientState RPC method
      type: object
      properties:
        consensus_state:
          title: consensus state associated with the channel
          type: object
          properties:
            type_url:
              type: string
              description: |-
                A URL/resource name that uniquely identifies the type of the serialized
                protocol buffer message. This string must contain at least
                one "/" character. The last segment of the URL's path must represent
                the fully qualified name of the type (as in
                `path/google.protobuf.Duration`). The name should be in a canonical form
                (e.g., leading "." is not accepted).

                In practice, teams usually precompile into the binary all types that they
                expect it to use in the context of Any. However, for URLs which use the
                scheme `http`, `https`, or no scheme, one can optionally set up a type
                server that maps type URLs to message definitions as follows:

                * If no scheme is provided, `https` is assumed.
                * An HTTP GET on the URL must yield a [google.protobuf.Type][]
                  value in binary format, or produce an error.
                * Applications are allowed to cache lookup results based on the
                  URL, or have them precompiled into a binary to avoid any
                  lookup. Therefore, binary compatibility needs to be preserved
                  on changes to types. (Use versioned type names to manage
                  breaking changes.)

                Note: this functionality is not currently available in the official
                protobuf release, and it is not used for type URLs beginning with
                type.googleapis.com.

                Schemes other than `http`, `https` (or the empty scheme) might be
                used with implementation specific semantics.
            value:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: Must be a valid serialized protocol buffer of the above
                specified type.
              format: byte
          description: |-
            `Any` contains an arbitrary serialized protocol buffer message along with a
            URL that describes the type of the serialized message.

            Protobuf library provides support to pack/unpack Any values in the form
            of utility functions or additional generated methods of the Any type.

            Example 1: Pack and unpack a message in C++.

                Foo foo = ...;
                Any any;
                any.PackFrom(foo);
                ...
                if (any.UnpackTo(&foo)) {
                  ...
                }

            Example 2: Pack and unpack a message in Java.

                Foo foo = ...;
                Any any = Any.pack(foo);
                ...
                if (any.is(Foo.class)) {
                  foo = any.unpack(Foo.class);
                }

             Example 3: Pack and unpack a message in Python.

                foo = Foo(...)
                any = Any()
                any.Pack(foo)
                ...
                if any.Is(Foo.DESCRIPTOR):
                  any.Unpack(foo)
                  ...

             Example 4: Pack and unpack a message in Go

                 foo := &pb.Foo{...}
                 any, err := ptypes.MarshalAny(foo)
                 ...
                 foo := &pb.Foo{}
                 if err := ptypes.UnmarshalAny(any, foo); err != nil {
                   ...
                 }

            The pack methods provided by protobuf library will by default use
            'type.googleapis.com/full.type.name' as the type URL and the unpack
            methods only use the fully qualified type name after the last '/'
            in the type URL, for example "foo.bar.com/x/y.z" will yield type
            name "y.z".


            JSON
            ====
            The JSON representation of an `Any` value uses the regular
            representation of the deserialized, embedded message, with an
            additional field `@type` which contains the type URL. Example:

                package google.profile;
                message Person {
                  string first_name = 1;
                  string last_name = 2;
                }

                {
                  "@type": "type.googleapis.com/google.profile.Person",
                  "firstName": <string>,
                  "lastName": <string>
                }

            If the embedded message type is well-known and has a custom JSON
            representation, that representation will be embedded adding a field
            `value` which holds the custom JSON in addition to the `@type`
            field. Example (for message [google.protobuf.Duration][]):

                {
                  "@type": "type.googleapis.com/google.protobuf.Duration",
                  "value": "1.212s"
                }
        client_id:
          title: client ID associated with the consensus state
          type: string
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: height at which the proof was retrieved
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping
            RevisionNumber the same. However some consensus algorithms may choose to
            reset the height in certain conditions e.g. hard forks, state-machine
            breaking changes In these cases, the RevisionNumber is incremented so that
            height continues to be monitonically increasing even as the RevisionHeight
            gets reset
    ibc.core.channel.v1.QueryChannelResponse:
      type: object
      properties:
        channel:
          title: channel associated with the request identifiers
          type: object
          properties:
            state:
              title: current state of the channel end
              type: string
              description: |-
                State defines if a channel is in one of the following states:
                CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                 - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                 - STATE_INIT: A channel has just started the opening handshake.
                 - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                 - STATE_OPEN: A channel has completed the handshake. Open channels are
                ready to send and receive packets.
                 - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                packets.
              default: STATE_UNINITIALIZED_UNSPECIFIED
              enum:
              - STATE_UNINITIALIZED_UNSPECIFIED
              - STATE_INIT
              - STATE_TRYOPEN
              - STATE_OPEN
              - STATE_CLOSED
            ordering:
              title: whether the channel is ordered or unordered
              type: string
              description: |-
                - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                 - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                which they were sent.
                 - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
              default: ORDER_NONE_UNSPECIFIED
              enum:
              - ORDER_NONE_UNSPECIFIED
              - ORDER_UNORDERED
              - ORDER_ORDERED
            counterparty:
              title: counterparty channel end
              type: object
              properties:
                port_id:
                  type: string
                  description: port on the counterparty chain which owns the other
                    end of the channel.
                channel_id:
                  title: channel end on the counterparty chain
                  type: string
            connection_hops:
              title: |-
                list of connection identifiers, in order, along which packets sent on
                this channel will travel
              type: array
              items:
                type: string
            version:
              title: opaque channel version, which is agreed upon during the handshake
              type: string
          description: |-
            Channel defines pipeline for exactly-once packet delivery between specific
            modules on separate blockchains, which has at least one end capable of
            sending packets and one end capable of receiving packets.
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: height at which the proof was retrieved
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping
            RevisionNumber the same. However some consensus algorithms may choose to
            reset the height in certain conditions e.g. hard forks, state-machine
            breaking changes In these cases, the RevisionNumber is incremented so that
            height continues to be monitonically increasing even as the RevisionHeight
            gets reset
      description: |-
        QueryChannelResponse is the response type for the Query/Channel RPC method.
        Besides the Channel end, it includes a proof and the height from which the
        proof was retrieved.
    ibc.core.channel.v1.QueryChannelsResponse:
      type: object
      properties:
        channels:
          type: array
          description: list of stored channels of the chain.
          items:
            type: object
            properties:
              state:
                title: current state of the channel end
                type: string
                description: |-
                  State defines if a channel is in one of the following states:
                  CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                   - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                   - STATE_INIT: A channel has just started the opening handshake.
                   - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                   - STATE_OPEN: A channel has completed the handshake. Open channels are
                  ready to send and receive packets.
                   - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                  packets.
                default: STATE_UNINITIALIZED_UNSPECIFIED
                enum:
                - STATE_UNINITIALIZED_UNSPECIFIED
                - STATE_INIT
                - STATE_TRYOPEN
                - STATE_OPEN
                - STATE_CLOSED
              ordering:
                title: whether the channel is ordered or unordered
                type: string
                description: |-
                  - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                   - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                  which they were sent.
                   - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                default: ORDER_NONE_UNSPECIFIED
                enum:
                - ORDER_NONE_UNSPECIFIED
                - ORDER_UNORDERED
                - ORDER_ORDERED
              counterparty:
                title: counterparty channel end
                type: object
                properties:
                  port_id:
                    type: string
                    description: port on the counterparty chain which owns the other
                      end of the channel.
                  channel_id:
                    title: channel end on the counterparty chain
                    type: string
              connection_hops:
                title: |-
                  list of connection identifiers, in order, along which packets sent on
                  this channel will travel
                type: array
                items:
                  type: string
              version:
                title: opaque channel version, which is agreed upon during the handshake
                type: string
              port_id:
                title: port identifier
                type: string
              channel_id:
                title: channel identifier
                type: string
            description: |-
              IdentifiedChannel defines a channel with additional port and channel
              identifier fields.
        pagination:
          title: pagination response
          type: object
          properties:
            next_key:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
        height:
          title: query block height
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping
            RevisionNumber the same. However some consensus algorithms may choose to
            reset the height in certain conditions e.g. hard forks, state-machine
            breaking changes In these cases, the RevisionNumber is incremented so that
            height continues to be monitonically increasing even as the RevisionHeight
            gets reset
      description: QueryChannelsResponse is the response type for the Query/Channels
        RPC method.
    ibc.core.channel.v1.QueryConnectionChannelsResponse:
      title: |-
        QueryConnectionChannelsResponse is the Response type for the
        Query/QueryConnectionChannels RPC method
      type: object
      properties:
        channels:
          type: array
          description: list of channels associated with a connection.
          items:
            type: object
            properties:
              state:
                title: current state of the channel end
                type: string
                description: |-
                  State defines if a channel is in one of the following states:
                  CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

                   - STATE_UNINITIALIZED_UNSPECIFIED: Default State
                   - STATE_INIT: A channel has just started the opening handshake.
                   - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
                   - STATE_OPEN: A channel has completed the handshake. Open channels are
                  ready to send and receive packets.
                   - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
                  packets.
                default: STATE_UNINITIALIZED_UNSPECIFIED
                enum:
                - STATE_UNINITIALIZED_UNSPECIFIED
                - STATE_INIT
                - STATE_TRYOPEN
                - STATE_OPEN
                - STATE_CLOSED
              ordering:
                title: whether the channel is ordered or unordered
                type: string
                description: |-
                  - ORDER_NONE_UNSPECIFIED: zero-value for channel ordering
                   - ORDER_UNORDERED: packets can be delivered in any order, which may differ from the order in
                  which they were sent.
                   - ORDER_ORDERED: packets are delivered exactly in the order which they were sent
                default: ORDER_NONE_UNSPECIFIED
                enum:
                - ORDER_NONE_UNSPECIFIED
                - ORDER_UNORDERED
                - ORDER_ORDERED
              counterparty:
                title: counterparty channel end
                type: object
                properties:
                  port_id:
                    type: string
                    description: port on the counterparty chain which owns the other
                      end of the channel.
                  channel_id:
                    title: channel end on the counterparty chain
                    type: string
              connection_hops:
                title: |-
                  list of connection identifiers, in order, along which packets sent on
                  this channel will travel
                type: array
                items:
                  type: string
              version:
                title: opaque channel version, which is agreed upon during the handshake
                type: string
              port_id:
                title: port identifier
                type: string
              channel_id:
                title: channel identifier
                type: string
            description: |-
              IdentifiedChannel defines a channel with additional port and channel
              identifier fields.
        pagination:
          title: pagination response
          type: object
          properties:
            next_key:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
        height:
          title: query block height
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping
            RevisionNumber the same. However some consensus algorithms may choose to
            reset the height in certain conditions e.g. hard forks, state-machine
            breaking changes In these cases, the RevisionNumber is incremented so that
            height continues to be monitonically increasing even as the RevisionHeight
            gets reset
    ibc.core.channel.v1.QueryNextSequenceReceiveResponse:
      title: |-
        QuerySequenceResponse is the request type for the
        Query/QueryNextSequenceReceiveResponse RPC method
      type: object
      properties:
        next_sequence_receive:
          title: next sequence receive number
          type: string
          format: uint64
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: height at which the proof was retrieved
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping
            RevisionNumber the same. However some consensus algorithms may choose to
            reset the height in certain conditions e.g. hard forks, state-machine
            breaking changes In these cases, the RevisionNumber is incremented so that
            height continues to be monitonically increasing even as the RevisionHeight
            gets reset
    ibc.core.channel.v1.QueryPacketAcknowledgementResponse:
      title: |-
        QueryPacketAcknowledgementResponse defines the client query response for a
        packet which also includes a proof and the height from which the
        proof was retrieved
      type: object
      properties:
        acknowledgement:
          title: packet associated with the request fields
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: height at which the proof was retrieved
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping
            RevisionNumber the same. However some consensus algorithms may choose to
            reset the height in certain conditions e.g. hard forks, state-machine
            breaking changes In these cases, the RevisionNumber is incremented so that
            height continues to be monitonically increasing even as the RevisionHeight
            gets reset
    ibc.core.channel.v1.QueryPacketAcknowledgementsResponse:
      title: |-
        QueryPacketAcknowledgemetsResponse is the request type for the
        Query/QueryPacketAcknowledgements RPC method
      type: object
      properties:
        acknowledgements:
          type: array
          items:
            type: object
            properties:
              port_id:
                type: string
                description: channel port identifier.
              channel_id:
                type: string
                description: channel unique identifier.
              sequence:
                type: string
                description: packet sequence.
                format: uint64
              data:
                pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                type: string
                description: embedded data that represents packet state.
                format: byte
            description: |-
              PacketState defines the generic type necessary to retrieve and store
              packet commitments, acknowledgements, and receipts.
              Caller is responsible for knowing the context necessary to interpret this
              state as a commitment, acknowledgement, or a receipt.
        pagination:
          title: pagination response
          type: object
          properties:
            next_key:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
        height:
          title: query block height
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping
            RevisionNumber the same. However some consensus algorithms may choose to
            reset the height in certain conditions e.g. hard forks, state-machine
            breaking changes In these cases, the RevisionNumber is incremented so that
            height continues to be monitonically increasing even as the RevisionHeight
            gets reset
    ibc.core.channel.v1.QueryPacketCommitmentResponse:
      title: |-
        QueryPacketCommitmentResponse defines the client query response for a packet
        which also includes a proof and the height from which the proof was
        retrieved
      type: object
      properties:
        commitment:
          title: packet associated with the request fields
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: height at which the proof was retrieved
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping
            RevisionNumber the same. However some consensus algorithms may choose to
            reset the height in certain conditions e.g. hard forks, state-machine
            breaking changes In these cases, the RevisionNumber is incremented so that
            height continues to be monitonically increasing even as the RevisionHeight
            gets reset
    ibc.core.channel.v1.QueryPacketCommitmentsResponse:
      title: |-
        QueryPacketCommitmentsResponse is the request type for the
        Query/QueryPacketCommitments RPC method
      type: object
      properties:
        commitments:
          type: array
          items:
            type: object
            properties:
              port_id:
                type: string
                description: channel port identifier.
              channel_id:
                type: string
                description: channel unique identifier.
              sequence:
                type: string
                description: packet sequence.
                format: uint64
              data:
                pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
                type: string
                description: embedded data that represents packet state.
                format: byte
            description: |-
              PacketState defines the generic type necessary to retrieve and store
              packet commitments, acknowledgements, and receipts.
              Caller is responsible for knowing the context necessary to interpret this
              state as a commitment, acknowledgement, or a receipt.
        pagination:
          title: pagination response
          type: object
          properties:
            next_key:
              pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
              type: string
              description: |-
                next_key is the key to be passed to PageRequest.key to
                query the next page most efficiently. It will be empty if
                there are no more results.
              format: byte
            total:
              title: |-
                total is total number of results available if PageRequest.count_total
                was set, its value is undefined otherwise
              type: string
              format: uint64
          description: |-
            PageResponse is to be embedded in gRPC response messages where the
            corresponding request message has used PageRequest.

             message SomeResponse {
                     repeated Bar results = 1;
                     PageResponse page = 2;
             }
        height:
          title: query block height
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping
            RevisionNumber the same. However some consensus algorithms may choose to
            reset the height in certain conditions e.g. hard forks, state-machine
            breaking changes In these cases, the RevisionNumber is incremented so that
            height continues to be monitonically increasing even as the RevisionHeight
            gets reset
    ibc.core.channel.v1.QueryPacketReceiptResponse:
      title: |-
        QueryPacketReceiptResponse defines the client query response for a packet
        receipt which also includes a proof, and the height from which the proof was
        retrieved
      type: object
      properties:
        received:
          title: success flag for if receipt exists
          type: boolean
          format: boolean
        proof:
          title: merkle proof of existence
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          format: byte
        proof_height:
          title: height at which the proof was retrieved
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping
            RevisionNumber the same. However some consensus algorithms may choose to
            reset the height in certain conditions e.g. hard forks, state-machine
            breaking changes In these cases, the RevisionNumber is incremented so that
            height continues to be monitonically increasing even as the RevisionHeight
            gets reset
    ibc.core.channel.v1.QueryUnreceivedAcksResponse:
      title: |-
        QueryUnreceivedAcksResponse is the response type for the
        Query/UnreceivedAcks RPC method
      type: object
      properties:
        sequences:
          title: list of unreceived acknowledgement sequences
          type: array
          items:
            type: string
            format: uint64
        height:
          title: query block height
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping
            RevisionNumber the same. However some consensus algorithms may choose to
            reset the height in certain conditions e.g. hard forks, state-machine
            breaking changes In these cases, the RevisionNumber is incremented so that
            height continues to be monitonically increasing even as the RevisionHeight
            gets reset
    ibc.core.channel.v1.QueryUnreceivedPacketsResponse:
      title: |-
        QueryUnreceivedPacketsResponse is the response type for the
        Query/UnreceivedPacketCommitments RPC method
      type: object
      properties:
        sequences:
          title: list of unreceived packet sequences
          type: array
          items:
            type: string
            format: uint64
        height:
          title: query block height
          type: object
          properties:
            revision_number:
              title: the revision that the client is currently on
              type: string
              format: uint64
            revision_height:
              title: the height within the given revision
              type: string
              format: uint64
          description: |-
            Normally the RevisionHeight is incremented at each height while keeping
            RevisionNumber the same. However some consensus algorithms may choose to
            reset the height in certain conditions e.g. hard forks, state-machine
            breaking changes In these cases, the RevisionNumber is incremented so that
            height continues to be monitonically increasing even as the RevisionHeight
            gets reset
    ibc.core.channel.v1.State:
      type: string
      description: |-
        State defines if a channel is in one of the following states:
        CLOSED, INIT, TRYOPEN, OPEN or UNINITIALIZED.

         - STATE_UNINITIALIZED_UNSPECIFIED: Default State
         - STATE_INIT: A channel has just started the opening handshake.
         - STATE_TRYOPEN: A channel has acknowledged the handshake step on the counterparty chain.
         - STATE_OPEN: A channel has completed the handshake. Open channels are
        ready to send and receive packets.
         - STATE_CLOSED: A channel has been closed and can no longer be used to send or receive
        packets.
      default: STATE_UNINITIALIZED_UNSPECIFIED
      enum:
      - STATE_UNINITIALIZED_UNSPECIFIED
      - STATE_INIT
      - STATE_TRYOPEN
      - STATE_OPEN
      - STATE_CLOSED
servers:
  - url: https://lcd.osmosis.zone
    description: Osmosis mainnet node
  - url: https://lcd-test.osmosis.zone
    description: Osmosis testnet node